	////////////////	USING THE TEST METHOD 	//////////////// /
if you want to find the word `the` in the string ,you could use the following regex: /the/.
JS has multiple ways to use regexes. One way to test a regex is using the `.test()` method + which returns true / false.
 EXAMPLE: 
let testStr="freeCodeCamp";
let testRegex=/Code/;
testRegex.test(testStr);

 EXERCISE:
let myString = "Hello, World!";
let myRegex = /Hello/;
let result = myRegex.test(myString); 


	////////////////	MATCH LITERAL STRINGS  	//////////////// //
For example, the regex /Kevin/ wont match kevin or KEVIN. !!


////////////////	MATCH A LITERAL STRING  WITH DIFFERENT POSSIBILITES 	//////////////// ///
Operator to match more than 1 patterns: /yes|no|maybe/

let petString="James has a pet cat.";
let petRegex=/dog|cat|bird|fish/;
let result=petRegex.test(petString);


////////////////	HOW TO IGNORE CASE WHILE MATCHING 	//////////////// ////
in that instance, you can use the `i` flag. exmple: `/ignorecase/i `  +> it will match: ignorecase, IgNoreCase, and IgnoreCASE


let str="freeCodeCamp";
let regex=/freecodecamp/i;
let result=regex.test(str


////////////////	EXTRACT MATCHES 	//////////////// /////
1) test() => checks if pattern exists or not within a string. 
2) match() => extract the actual matches you found.
"Hello, World!".match(/Hello/);
let ourStr="Regular expressions";
let ourRegex=/expressions/;
ourStr.match(ourRegex);

||this:
'string'.match(/regex/);
/regex/.test('string');

 EXERCISE:
let extractStr="Extract the word 'coding' from this string.";
let codingRegex=/coding/;
let result=extractStr.match(codingRegex);


////////////////	FIND MORE THAN THE FIRST MATCH 	//////////////// //////
to search or extract a pattern more than once, you can use the global flag : `g`.
example:
	let repeatRegex=/Repeat/g;
	testStr.match(repeatReggex);
	,match +> ["Repeat","Repeat","Repeat"]...

solve:
let twinkleStar="Twinkle, twinkle, little star";
let starRegex=/twinkle/ig;
let result=twinkleStar.match(starRegex);
console.log(result) // 	+> ['Twinkle', 'twinkle'].


////////////////	MATCH ANYTHING WITH WILDCARD PERIOD 	//////////////// ///////
example:
 let humStr="I'll hum a song";
 let hugStr="Bear hug";
 let huRegex=/hu./;
 huRegex.test(humStr);	//true
 huRegex.test(hugStr);	//true
exercise:
	let exampleStr="Let's have fuin with regular expressions!";
	let unRegex=/.un/;
	let result=unRegex.test(exampleStr); // true
	

////////////////	MATCH SINGLE CHARACTER WITH MULTIPLE POSSIBILITIES	 	//////////////// ///////
example: 
 let bigStr="big";
 let bagStr="bag";
 let bugStr="bug";
 let bogStr="bog";
 let bgRegex=/b[aiu]g/;
 bigStr.match(bgRegex);		
 bagStr.match(bgRegex);
 bugStr.match(bgRegex);
 bogStr.match(bgRegex);
 // match +> ["big"], => ["bag"] => ["bug"] => null.

exercise:
let quoteSample = "Beware of bugs in the above code; I have only proved it correct.";
let vowelRegex=/[aeiouAEIOU]/gi;
let result=quoteSample.match(vowelRegex);


////////////////	MATCH RANGE OF LETTERS OF THE ALPHABER	 	//////////////// ////////
let catStr="cat";
let batStr="bat;
let matStr = "mat";
let bgRegex = /[a-e]at/;
catStr.match(bgRegex);
batStr.match(bgRegex);
matStr.match(bgRegex);
 // match +> ["cat"], ["bat"], null
 
 let quoteSample = "The quick brown fox jumps over the lazy dog.";
let alphabetRegex = /[a-z]/ig; // Change this line
let result = quoteSample.match(alphabetRegex); // Change this line


////////////////	MATCH NUMBERS AND LETTERS	 	//////////////// /////////
let jennyStr = "Jenny8675309";
let myRegex = /[a-z0-9]/ig;
jennyStr.match(myRegex);

let quoteSample = "Blueberry 3.141592653s are delicious.";
let myRegex = /[h-s2-6]/gi; // Change this line
let result = quoteSample.match(myRegex); // Change this line


////////////////	MATCH SINGLE CHARACTERS NOT SPECIFIED	 	//////////////// //////////
Creatin a negated character set = place a caret character (^) after the opening bracket and before the characters you do not want to match.
example: /[^aeiou]/gi  +> matches all characters like: .,!,[,@,/ and white spaces are matched. Every single char that is not a vowel.

let quoteSample = "3 blind mice.";
let myRegex = /[^aeiou0-9]/gi; // Change this line
let result = quoteSample.match(myRegex); // Change this line


////////////////	MATCH CHARACTERS THAT OCCUR ONE || MORE+ TIMES	 	//////////////// ///////////
example:
	/a+/g finds one match in 'abc' +> ["a"], and ["aa"] in 'aabc' string.
	
let difficultSpelling = "Mississippi";
let myRegex = /s+/g; // Change this line
let result = difficultSpelling.match(myRegex);


////////////////	MATCH CHARACTERS THAT OCCUR ZERO OR+ MORE TIMES	 	//////////////// ////////////
* operator.
let chewieRegex=/Aa*/;
let result = chewieQuote.match(chewieRegex);


////////////////	FIND CHARACTERS WITH LAZY MATCHING.	 	//////////////// ////////////
/t[a-z]*i/ would find ["titani"] in 'titanic' string.
/t[a-z]*?i/ 	returns ["ti"]

let text = "<h1>Winter is coming</h1>";
let myRegex = /<.*?>/;
let result = text.match(myRegex);


////////////////	FIND CHARACTERS WITH LAZY MATCHING.	 	//////////////// /////////////
let reCriminals=/C+/g;


////////////////	MATCH BEGINNING STRING PATTERNS.	 	//////////////// //////////////
let firstString="Ricky is first and can be found.";
let firstRegex=/^Ricky/;
firstRegex.test(firstString);	// true
let notFirst = "You can't find Ricky now.";
firstRegex.test(notFirst);		// false

let rickyAndCal = "Cal and Ricky both like racing.";
let calRegex=/^Cal/;
let result=calRegex.test(rickyAndCal);


////////////////	MATCH ENDING_$$$$ STRING PATTERNS.	 	//////////////// ///////////////
let theEnding= "Tihs is a never ending story";
let storyRegex=/story$/;
storyRegex.test(theEnding);		//true
let noEnding="Sometimes a story will have to end";
storyRegex.test(noEnding);		//false

let caboose = "The last car on a train is the caboose";
let lastRegex = /caboose$/;
let result = lastRegex.test(caboose);


////////////////	MATCH ALL LETTERS AND NUMBERS  	//////////////// ////////////////
let longHand=/[A-Za-z0-9_]+/;
let shortHand=/\w+/;
let numbers="42";
let varNames="important_var";
longHand.test(numbers);		//true
shortHand.test(numbers);	//true
longHand.test(varNames);	//true;
shortHand.test(varNames);	//true;

exercise:
let quoteSample="The five boxing wizards jump quickly.";
let alphabetRegexV2 = /\w/g;
let result= quoteSample.match(alphabetRegexV2).length;
console.log(result) 	//+> 31.


////////////////	MATCH EVERYTHING BUT LETTERS AND NUMBERS  	//////////////// 
search for opposite of \w using \W. === [^A-Za-z0-9_]
let shortHand=/\W/;
let numbers="42%";
let sentence = "Coding!";
numbers.match(shortHand);	//["%"]
sentence.match(shortHand);	//["!"].

let quoteSample = "The five boxing wizards jump quickly.";
let nonAlphabetRegex = /\W/g; 
let result = quoteSample.match(nonAlphabetRegex).length;


////////////////	 MATCH ALL NUMBERS   	//////////////// /
let movieName = "2001: A Space Odyssey";
let numRegex = /\d/g;
let result = movieName.match(numRegex).length;


////////////////	 MATCH ALL NON!! NUMBERS   	//////////////// //
use \D .
let movieName = "2001: A Space Odyssey";
let noNumRegex = /\D/g; 
let result = movieName.match(noNumRegex).length;


////////////////	 Restrict Possible Usernames   	//////////////// //
let regex=/[aeiouAEIOU]+[^aeiouAEIOU0-9]*/;	//that's wrong
let testStrings=["JACK", "J", "Jo", "Oceans11", "RegexGuru", "007", "J%4"];
testStrings.forEach(str => {
	console.log(`String: ${str}, Matches: ${regex.test(str)}`);
});

let userCheck = /^[a-z][a-z]+\d*$|^[a-z]\d\d+$/i;
^ - start of input
[a-z] - first character is a letter
[a-z]+ - following characters are letters
\d*$ - input ends with 0 or more digits
| - or
^[a-z] - first character is a letter
\d\d+ - following characters are 2 or more digits
$ - end of input

||
const userCheck = /^[a-z]([0-9]{2,}|[a-z]+\d*)$/i;
^ - start of input
[a-z] - first character is a letter
[0-9]{2,} - ends with two or more numbers
| - or
[a-z]+ - has one or more letters next
\d* - and ends with zero or more numbers
$ - end of input
i - ignore case of input


////////////////	 Restrict WHITESPACE   	//////////////// ///
let whiteSpace="Whitespace. Whitespace everywhere!"
let spaceRegex=/\s/g;
whiteSpace.match(spaceRegex);	// +> [" ", " "].

let sample = "Whitespace is important in separating words";
let countWhiteSpace = /\s/g; // Change this line
let result = sample.match(countWhiteSpace);


////////////////	 Match Non-Whitespace Characters.   	//////////////// ////
\S.
let sample = "Whitespace is important in separating words";
let countNonWhiteSpace = /\S/g;
let result = sample.match(countNonWhiteSpace);


////////////////	 Specify Upper and Lower number of Matches.   	//////////////// /////
let A4="aaaah";
let A2="aah";
let multipleA= /a{3,5}h/;
multipleA.test(A4);		//true
multipleA.test(A2);		//false.

let ohStr = "Ohhh no";
let ohRegex = /Oh{3,6} no/g; // 
let result = ohRegex.test(ohStr);


////////////////	 Specify Only the Lower Number of Matches.   	//////////////// //////
let A4="haaaah";
let A2="haah";
let A100= "h" + "a".repeat(100) +"h";
let multipleA=/ha{3,}h/;
multipleA.test(A4);	//true
multipleA.test(A2);	//false
mulitpleA.test(A100); 	//true:

let haStr = "Hazzzzah";
let haRegex = /Haz{4,}ah/; // Change this line
let result = haRegex.test(haStr);


////////////////	 Specify THE EXACT NUMBER OF Matches.   	//////////////// ///////
let A4="haaaah";
let A3="haaah";
let A100="h"+"a".repeat(100)+"h";
let multipleHA = /ha{3}h/;
multipleHA.test(A4); //false
multipleHA.test(A3); //true
multipleHA.test(A100); //false

let timStr = "Timmmmber";
let timRegex = /Tim{4}ber/g; // 
let result = timRegex.test(timStr);


/////////////// CHECK FOR ALL OR NONE:. ////////// /////
let american = "color";
let british = "colour";
let rainbowRegex= /colou?r/;
rainbowRegex.test(american);	//true
rainbowRegex.test(british);		//true

let favWord = "favorite";
let favRegex = /favou?rite/; // 
let result = favRegex.test(favWord);


/////////////// POSITIVE AND NEGATIVE LOOKAHEAD:. ////////// //////
positive/negative lookahead: will look to make sure the element in the search pattern is there/is not in the sample, but won't match it. A positive lookahead: (?=...), Negative one: (?!...).
let quit="qu";
let noquit="qt";
let quRegex= /q(?=u)/;
let qRegex= /q(?!u)/;
quit.match(quRegex);	//["q"]
noquit.match(qRegex);	//["q"]

or||
let passowrd="abc123";
let checkPass=/(?=\w{3,6})(?=\D*\d)/;
checkPass.test(password);

let pwRegex = /(?=\w{5,})(?=\D*\d{2,})/;
should be:
let pwRegex= /(?=\w{6})(?=\w*\d{2})/;


/////////////// CHECK FOR MIXED GROUPING OF CHARACTERS:. ////////// ///////
let testStr="Pumpkin";
let testRegex=/P(engu|umpk)in/;
testRegex.test(testStr);

let myRegex = /(Franklin|Eleanor) Roosevelt/g; // Change this line
let myRegex = /(Franklin|Eleanor)( D\.)? Roosevelt/g;

let myString = "Eleanor Roosevelt";
let myRegex = /(Franklin|Eleanor)( D\.)? Roosevelt/g; //
let result = myRegex.test(myString); // 

