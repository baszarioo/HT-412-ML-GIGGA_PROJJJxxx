/////////////// Compare Scopes of the var and let Keywords /////////////////////
function checkScope() {
	let i ='function scope';
	if(true) {
		let i ='block scope';
		console.log('Block scope i is: ',i);
	}
	console.log('Function scope i is: ',i);
	return i;
}	// +> 2 different i values, one in block scope, different one in the function scope.


/////////////// Mutate an Array Declared with const. ///////////////////// /
const s=[5,7,2];
function editInPlace(){
	/* s=[1,2,3];  //error */
	s[0]=2;
	s[1]=5;
	s[2]=7;
}
editInPlace();


/////////////// Prevent Object Mutation. ///////////////////// //
/* let obj = {
  name:"FreeCodeCamp",
  review:"Awesome"
};
Object.freeze(obj);
obj.review = "bad";		//error
obj.newProp = "Test";	//error
console.log(obj); 		*/

function freezeObj() {
	const MATH_CONSTANTS={
		PI: 3.14
	};
	Object.freeze(MATH_CONSTANTS);
	try {
		MATH_CONSTANTS.PI=99;
	} catch (ex) {
		console.log(ex);
	} return MATH_CONSTANTS.PI;
} const PI = freezeObj();		//+> returns 3.14


/////////////// Arrow Functions to Write Concise Anonymous Functions. ///////////////////// ///
 /*
 const myFunc=function() {
	const myVar="value";
	return myVar;
 }
 // =====================
 const myFunc=()=> {
	const myVar="value";
	return myVar;
 }
 // =====================
 const myFFunc = () => "value";
 // all these functions do the same.

const magic = () => new Date();


/////////////// Write Arrow Functions with Parameters. ///////////////////// ////
 /* exampl 
 const multiplier=(item, multi) => item*multi;
 multiplier(4,1);
 */

const myConcat = (arr1, arr2) => {
	return arr1.concat(arr2);
};
console.log(myConcat([1,2], [3,4,5]));


/////////////// Set Default parameters for your Function. ///////////////////// /////
 /* const greeting = (name="Anonymous") => "Hello " + name;		*/
const increment = (number, value=1) => nubmer + value;


/////////////// Use the rest parameter with Function Parameters. ///////////////////// //////
 /* function howMany(...args) { return "You have passed "+args.length+ " arguments."; */
 
const sum= (...args) => {
	let total=0;
	for(let i=0; i<args.length; i++) {
		total +=args[i];
	} return total; 
}


/////////////// Use the Spread Operator to Evaluate Arrays In-Place. ///////////////////// ///////
ES5: var arr=[6,89,3,45];
	var maximus=Math.max.apply(null, arr);
ES6: var arr=[6,89,1,45];
	var maximus=Math.max(...arr);
	
	how to use spread:
		const spreaded=[...arr];
	
const arr=1=['JAN', 'FEB', 'MAR', 'APR', 'MAY'];
let arr2;
arr2= [...arr1];
console.log(arr2);


/////////////// DESTRUCTURINGG ASSIGNMENT TO EXTRACT VALUES FROM OBJECTS>. ///////////////////// ////////
 checkt that:
	const user={name: 'John Doe', age: 34 };
	const name=user.name;
	const age=user.age;
	||
	const { name, age } = user
	
 BEFORE:
	const HIGH_TEMPERATURES = {
		yesterday: 75,
		today: 77,
		tomorrow: 80
	};
	const today = HIGH_TEMPERATURES.today;
	const tomorrow = HIGH_TEMPERATURES.tomorrow;
	/* could've been": */
	const { today, tomorrow } = HIGH_TEMPERATURES;
	
	
/////////////// DESTRUCTURIZIN IN OTHER WAY AROUND:>. ///////////////////// /////////
 1st:
	const user = {name: 'John Doe', age: 34 };
 2nd: 
	const {name: userName, age: userAge } =user;
	
FIX;
const HIGH_TEMPERATURES = {
	yesterday: 75,
	today: 77,
	tomrrow: 80
};
const { today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES;

/////////////// DESTRUCTURIZING FROM NESTED OBJECTS. ///////////////////// //////////
look: 
	const user= {
		johnDoe: {
			age: 34,
			email: 'johnDoe@freeCodeCamp.com'
		}
	};
look2: 
	const { johnDoe: {age, email}} = user;
	||"
	const { johnDoe: { age: userAge, email: userEmail }}=user; 
	
SOLVE:
const LOCAL_FORECAST = {
 yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};
 const { today: { low: lowToday, high: highToday }} =LOCAL_FORECAST;
 
 
/////////////// DESTRUCTURIZING TO ASSIGN VARIABLES FROM ARRAYS: . ///////////////////// ///////////
1: 
	const [a,b]=[1,2,3,4,5,6];
	console.log(a,b);
2: 
	const [a,b,,, c] = [1,2,3,4,5,6];
	console.log(a,b,c); // +> 1,2,5
	
 // destructurize to swap numbers:
 let a=8, b=6;
 [a,b]=[b,a];
 

/////////////// DESTRUCTURIZING VIA REST ELEMENTS: . ///////////////////// ///////////
function removeFirstTwo(list) {
	const [a,b, ...shorterList]=list;
	// or |: const [,, ...shorterList]=list;
	return shorterList;
}
const source=[1,2,3,4,5,6,7,8,9,10];
const sourceWithoutFirstTwo=removeFirstTwo(source);


/////////////// DESTRUCTURIZING ASSINGMENT TO PASS AN OBJECT AS A FUNCTION's PARAMETERS: .  /////////////
const profileUpdate = (profileData) => {
	const {name,ae,nationality, location } = profileData;
 ===
const profileUpdate= ({name, age, nationality, location }) => { ... }


const stats={
	max: 56.78,
	standard_deviation: 4.34, 
	min: -0.75
	//...
};
const half=({max, min })=>(max + min)/2.0;



/////////////// CREATE STRINGS USING TEMPLATE LITERALS.  ///////////// /
const person = {
	name: "Zodiac Hasbro",
	age: 56
};
const greeting=`Hello, my name is ${person.name}! 
 I am ${person.age} years old.`;
console.log(greeting);

solve :
we have: 
const result = {
	success: ["max-length", "no-amd", "prefer-arrow-functions"],
	failure: ["no-var", "var-on-top", "linebreak"],
	skipped: ["no-extra-semi", "no-dup-keys"]
};
function makeList(arr){
	 const listItem=arr.map(item =>? `<li class="text-warning">${item}</li>`);
	return listItems;
}
const failureList = makeList(result.failure);


/////////////// WRITE CONCISE OOBOJECT LITERAL DECLARATIONS USING OBJECT PROPERTY.  ///////////// //
const getMousePosition = (x, y) => ({
  x: x,
  y: y
});
===
const getMousePosition = (x, y) => ({ x, y });

exercise: 
const createPerson = (name, age, gender) => {
	return { name, age, gender };
}


/////////////// WRITE CONCISE DECLARATIVE FUNCITONS ES6.  ///////////// ///
before:
	const person = {
		name: "Taylor",
		sayHello: function() {
			return `Hello! My name is ${this.name}.`;
		}
	};
After :
	const person = {
		name: "Taylor",
		sayHello() {
			return `Hello! My name is ${this.name}.`;
		}
	};
	
exercise:
const bicycle = {
	gear: 2,
	// setGear: function(newGear) {
	setGear(newGear){	this.gear= newGear; 	}
};
bicycle.setGear(3);
console.log(bicycle.gear);


/////////////// CLASS SYNTAX TO DEFINE A CONSTRUCTOR FUNCTION.  ///////////// ////
ES5: object can be created by defining a constructor function and using the 'new' keyword to instantiate the object.
ES6: class declaration has a constructor that is invoked with the new keyword.If the 'constructor' method is NOT explicitly defined, then it is implicitly defined with no arguments.

	||EXAMPLE||
// Explicit constructor, 
class SpaceShuttle {	
	constructor(targetPlanet) {
		this.targetPlanet = targetPlanet;
	}
	takeOff() {
		console.log("To "+ this.targetPlanet+ "!");
	}
}
// Implicit constructor
class Rocket { 
	launch() {
		console.log("To the moon!');
	}
}
const zeus = new SpaceShuttle('Jupiter');
zeus.takeOff();
const atlas=new Rocket();
atlas.launch();
//

exercise:
class Vegetable {
	constructor(veg) {
		this.veg=veg;
		this.name=veg;
	}
}
const carrot = new Vegetable('carrot');
console.log(carrot.name);


/////////////// USE GETTERS AND SETTERS TO ACCESS OBJECT.  ///////////// /////
class Book {
	constuctor(author) {
		this._author = author;
	}
	get writer() {
		return this._author;
	}
	set writer(updatedAuthoer) {	
		this._author= updatedAuthor;
	}
}
const novel = new Book('anonymous');
console.log(novel.writer);
novel.writer = 'newAuthor';
console.log(novel.writer);

actual exercise:
class Thermostat {
	constructor(fahrenheitTemperature) {
		this._fahrenheitTemperature = fahrenheitTemperature;
	}
	get temperatureInCelsius() {
		return (5/9)*(this._fahrenheitTemperature -32);
	}
	set temperatureInCelsius(celsiusTemperature) {	
		this._fahrenheitTemperature=(celsiusTemperature * 9.0) /5 + 32;
	}
} //usage;_.
const myThemorstat = new Themostat(68);
console.log(myThermostat.temperatureInCelsius);
myThermostat.temperatureInCelsius=25;
console.log(myThermostat.temperatureInCelsius);

or||
class Thermostat {
  constructor(tempFahr) {
    this._tempFahr = tempFahr;
  }
  get temperature() {
    return (5/9)*(this._tempFahr-32);
  }
  set temperature(updatedTemp) {
    this._tempFahr=(updatedTemp * 9.0)/5 +32;
  }
}
// Only change code above this line

const thermos = new Thermostat(76); // Setting in Fahrenheit scale
let temp = thermos.temperature; // 24.44 in Celsius
thermos.temperature = 26;
temp = thermos.temperature; // 26 in Celsius


/////////////// CREATING A MODULE SCRIPT.  ///////////// //////
<hmtl>
	<body>
		<script type="module" src="index.js"></script>
	</body>
</html>


/////////////// USE EXPORT TO SHARE A CODE BLOCK.  ///////////// ///////
export const add=(x,y) => {
	return x+y;
}
 or ||
const add = (x,y) => {
	return x+y;
}
export { add };

then -> you can import it in another file:
export {add,subtract};

then watch that:
export const uppercaseString= (string) => {
	return string.toUpperCase();
}
export const lowercaseString = (string) => {	
	return string.toLowerCase();
}


/////////////// REUSE JAVASCRIPT CODE USING IMPORT.  ///////////// ////////
import {add, subtract } from './math_functions.js';
or
import {uppercaseString, lowercaseString} from './string_functions.js'
uppercaseString('hello');
lowercaseString('WORLD!');


/////////////// USE * TO IMPORT EVERYTHING FROM A FILE  ///////////// ////////
import * as myMathMOdule from "./math_functions.js";
myMathModule.add(2,3);
myMathModule.subtract(5,3);

or ||
import * as stringFunctions from "./string_functions.js"
 stringFunctions.uppercaseString("hello");
 stringFunctions.lowercaseString("WORLD!");
 
 
/////////////// CREATE AN EXPORT FALLBACK WITH EXPORT DEFAULT. ///////////// /////////
examplel:
 export default function add(x,y) {
	return x+y;
 }			// <------------ this is function
 export default function(x,y) {
	return x+y;
 }			// <------------ this is anonymous funct.
 

/////////////// IMPORT A DEFAULT EXPORT. ///////////// //////////
import subtract from "./math_functions.js"
 subtract(7,4);
 

/////////////// CREATE A JAVASCRIPT PROMISE. ///////////// ////////// /
const myPromise = new Promise((resolve, reject) => {
});

solve:
const makeServerRequest = new Promise((resolve, reject) => {

});


/////////////// CVOMPLETE A PROMISE ::. ///////////// ////////// //
const myPromise = new Priomise((resolve,reject) => {
	if(condition here) {
		resolve("Promise fulfilled");
	} else {
		reject("Promise was rejected");
	}
});

solve:
const makeServerRequest = new Promise((resolve, reject) => {
	let repsonse fromServer;
	if(responseFromServer){
		resolve("We got the data");
	} else {
		reject("Data not received");
	}
});


/////////////// HANDLE A FULFILLED PROMISE WITH THEN:. ////////// ///
you want to make something with response from the server.This can be achieved by using the then method. The `then` method is executed imediately after your promise is fulfilled with `resolve`.

myPromise.then(result => { });


so we come to:
const makeServerRequest=new Promise((resolve, reject) => {
	let responseFromServer =true;
	if(responseFromServer){
		resolve("We got the data");
	} else {
		reject("Data not received");
	}
});
makeServerRequest.then(result => {
	console.log(result);
}).catch(error => {
	console.log(error);
});


/////////////// HANDLE A REJECTED PROMISE WITH CATCH:. ////////// ////
catch is the method used when your promise has been rejected.

const makeServerRequest = new Promise((resolve, reject) => {
  // responseFromServer is set to false to represent an unsuccessful response from a server
  let responseFromServer = false;
    
  if(responseFromServer) {
    resolve("We got the data");
  } else {  
    reject("Data not received");
  }
});

makeServerRequest.then(result => {
  console.log(result);
});
makeServerRequest.catch(error=> {
  console.log(error);
});