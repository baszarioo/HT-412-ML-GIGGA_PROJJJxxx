JS datatypes: undefined, null, boolean, string, symbol, bigint, number, object.
var myName;

var declared => value = undefined.
math operation on undefined => NaN.
concatenation of a string with an undefined => undefined.

write variables using camelCase ;)

var: same name can be overriden,	let - creates an object, allows only one instance of the same name/

read-only variables: 'const'

ex:
const FCC="freeCodeCamp" //can't change it.
let fact="is cool!"
fact="is awesome!"
console.log(FCC, fact);


const myVar=5+10;


let myVar=87;'
myVar++;


const ourDecimal=5.7;
var/let/const myDeccimal=ourDecimal;



const product=2.0 * 2.5;


const myStr = "I am a \"double quoted\" string inside \"double quotes\".";


const myStr ='<a href="http://www.example.com" target="_blank">Link</a>';


const myStr = 'FirstLine\n\t\\SecondLine\nThirdLine';


const myStr = "This is the start. " + "This is the end.";


let myStr="This is the first sentence. ";
myStr+="This is the second sentence."


const myName = "kamilub";
const myStr = "My name is "+myName + " and I am well!";


const someAdjective = "garbage";
let myStr = "Learning to code is ";
myStr+= someAdjective;
// myStr[0]='X' +> that wouldnt change anything.


//nested arrays: const myArray = [["bulls",23], ["lakers",14]];


 const myArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14],
];
const subarray=arr[3];
const nestedsubarray=arr[3][0];
const element=arr[3][0][1];
const myData = myArray[2][1];   //==8


const arr1=[1,2,3];
arr1.push(4,5); //+> [1,2,3,4,5]
const arr2=["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);    //+> ["Stimpson","J","cat",["happy", "joy"]]


const removedFromMyArray = myArray.pop()
44/x			/// OPERATIONS ON ARRAYS" ///

const myArray=[["John", 23], ["dog", 3]];
const removedFromMyArray=myArray.shift();

const myArray=[["John", 23], ["dog", 3]];
myArray.shift();
myArray.unshift(["Paul", 35]);


const myList = [];	//that should become an array +> 
myList.push(["Siema", 24]);
myList.push(["Siema", 24]);
myList.push(["Siema", 24]);
myList.push(["Siema", 24]);
myList.push(["Siema", 24]);

	///////////////////////////	FUNCTIONS SEGMENT /////////////////////////

function reusableFunction() {
  console.log("Hi World");
}
reusableFunction();

function functionWithArgs(p1, p2){
  console.log(p1 + p2);
 }
functionWithArgs(4,5);

function timesFive(num) {
  return num * 5;
}


let myGlobal=10;
function fun1() { oopsGlobal=5; }
function fun2() { 
	let output="";
	if(typeof myGlobal != "undefined") {
		output +="myGlobal: " + myGlobal;
	}
	if (typeof oopsGlobal != "undefined") {
		output +=" oopsGlobal: "+oopsGlobal;
	}	 console.log(output);	+> myGlobal:10, oopsGlobal: 5.
}		


function myLocalScope(){
	const myVar=5;
	console.log('inside myLocalScope', myVar);	+> 5
}
myLocalScope();
console.log('outside myLocalScope', myVar); +> ReferenceError: myVar is not defined.


const outerWear="T-Shirt";
function myOutfit() {
	const outerWear="sweater";
	return outerWear;
}
myOutfit();


let sum-0;
function addThree() { sum=sum+3; }
addThree();		//+> UNDEFINED./


let processed =0;
function processArg(num) { return (num+3)/5; }
processed=processArg(7);	// +> 2


function nextInLine(arr, item) {
	arr.push(item);
	item=arr.shift();
	return item;
}
let testArr=[1,2,3,4,5];
console.log("Before: "+JSON.stringify(testArr)); // +> [1,2,3,4,5]
console.log(nextInLine(testArr, 6));	// +> 1
consoel.log("After: "+JSON.stringfiy(testArr));	// +> [2,3,4,5,6]

///////////////////////// BOOLEANS ?/////////////
1 == 1 //true
1 == 2 //false
1 == '1' // true
"3" == 3 // true	//basic equality

function testStrict(val) {
	if(val === 7) {	//strict operator fo equality.//	
		return "Equal";
	} return "Not Equal";
}
testStrict(10);


1 != 2 //true
1 != "1" //false
1 != '1' //false

but: 
3!==3 //false
3!=='3' //true
4!==3 //true


5>3   //true
7>'3' //true
2>3   //false
'1'>9 //false
	<+>
6>=6	//true
7>='3'	//true
2>=3	//false
'7'>=9	//false


function testLogicalAnd(val) {
	if(val <=50 && val>=25){
		return "Yes"'
	}
	return "No";
}
testLogicalAnd(10);
if +> else if +> +> else....