JS datatypes: undefined, null, boolean, string, symbol, bigint, number, object.
var myName;

var declared => value = undefined.
math operation on undefined => NaN.
concatenation of a string with an undefined => undefined.

write variables using camelCase ;)

var: same name can be overriden,	let - creates an object, allows only one instance of the same name/

read-only variables: 'const'

ex:
const FCC="freeCodeCamp" //can't change it.
let fact="is cool!"
fact="is awesome!"
console.log(FCC, fact);


const myVar=5+10;


let myVar=87;'
myVar++;


const ourDecimal=5.7;
var/let/const myDeccimal=ourDecimal;



const product=2.0 * 2.5;


const myStr = "I am a \"double quoted\" string inside \"double quotes\".";


const myStr ='<a href="http://www.example.com" target="_blank">Link</a>';


const myStr = 'FirstLine\n\t\\SecondLine\nThirdLine';


const myStr = "This is the start. " + "This is the end.";


let myStr="This is the first sentence. ";
myStr+="This is the second sentence."


const myName = "kamilub";
const myStr = "My name is "+myName + " and I am well!";


const someAdjective = "garbage";
let myStr = "Learning to code is ";
myStr+= someAdjective;
// myStr[0]='X' +> that wouldnt change anything.


//nested arrays: const myArray = [["bulls",23], ["lakers",14]];


 const myArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14],
];
const subarray=arr[3];
const nestedsubarray=arr[3][0];
const element=arr[3][0][1];
const myData = myArray[2][1];   //==8


const arr1=[1,2,3];
arr1.push(4,5); //+> [1,2,3,4,5]
const arr2=["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);    //+> ["Stimpson","J","cat",["happy", "joy"]]


const removedFromMyArray = myArray.pop()
44/x			/// OPERATIONS ON ARRAYS" ///

const myArray=[["John", 23], ["dog", 3]];
const removedFromMyArray=myArray.shift();

const myArray=[["John", 23], ["dog", 3]];
myArray.shift();
myArray.unshift(["Paul", 35]);


const myList = [];	//that should become an array +> 
myList.push(["Siema", 24]);
myList.push(["Siema", 24]);
myList.push(["Siema", 24]);
myList.push(["Siema", 24]);
myList.push(["Siema", 24]);

	///////////////////////////	FUNCTIONS SEGMENT /////////////////////////

function reusableFunction() {
  console.log("Hi World");
}
reusableFunction();

function functionWithArgs(p1, p2){
  console.log(p1 + p2);
 }
functionWithArgs(4,5);

function timesFive(num) {
  return num * 5;
}


let myGlobal=10;
function fun1() { oopsGlobal=5; }
function fun2() { 
	let output="";
	if(typeof myGlobal != "undefined") {
		output +="myGlobal: " + myGlobal;
	}
	if (typeof oopsGlobal != "undefined") {
		output +=" oopsGlobal: "+oopsGlobal;
	}	 console.log(output);	+> myGlobal:10, oopsGlobal: 5.
}		


function myLocalScope(){
	const myVar=5;
	console.log('inside myLocalScope', myVar);	+> 5
}
myLocalScope();
console.log('outside myLocalScope', myVar); +> ReferenceError: myVar is not defined.


const outerWear="T-Shirt";
function myOutfit() {
	const outerWear="sweater";
	return outerWear;
}
myOutfit();


let sum-0;
function addThree() { sum=sum+3; }
addThree();		//+> UNDEFINED./


let processed =0;
function processArg(num) { return (num+3)/5; }
processed=processArg(7);	// +> 2


function nextInLine(arr, item) {
	arr.push(item);
	item=arr.shift();
	return item;
}
let testArr=[1,2,3,4,5];
console.log("Before: "+JSON.stringify(testArr)); // +> [1,2,3,4,5]
console.log(nextInLine(testArr, 6));	// +> 1
consoel.log("After: "+JSON.stringfiy(testArr));	// +> [2,3,4,5,6]

///////////////////////// BOOLEANS ?/////////////
1 == 1 //true
1 == 2 //false
1 == '1' // true
"3" == 3 // true	//basic equality

function testStrict(val) {
	if(val === 7) {	//strict operator fo equality.//	
		return "Equal";
	} return "Not Equal";
}
testStrict(10);


1 != 2 //true
1 != "1" //false
1 != '1' //false

but: 
3!==3 //false
3!=='3' //true
4!==3 //true


5>3   //true
7>'3' //true
2>3   //false
'1'>9 //false
	<+>
6>=6	//true
7>='3'	//true
2>=3	//false
'7'>=9	//false


function testLogicalAnd(val) {
	if(val <=50 && val>=25){
		return "Yes"'
	}
	return "No";
}
testLogicalAnd(10);
if +> else if +> +> else....


if(num<5) {
    return "Tiny";
  } else if(num<10) {
    return "Small";
  } else if(num<15) {
    return "Medium";
  } else if(num<20) {
    return "Large";
  } else if(num>=20) {
    return "Huge";
}


const names=["Hole-in-one!","Eagle","Birdie","Par","Bogey","Double Bogey","Go Home!"];
function golfScore(par, strokes){
	if(strokes==1){
		return names[0];
	} else if(strokes<=par-2) {
		return names[1];
	} else if(strokes==par-1) {
		return "Birdie";
	} else if(strokes==par) {
		return "Par";
	} else if(strokes==par+1) {
		return "Bogey";
	} else if(strokes==par+2) {
		return "Double Bogey";
	} else if(strokes>=par+3) {
		return "Go Home!";
	}
}


function caseInSwitch(val) {
  let answer = "";
  // Only change code below this line
    switch(val) {
      case 1:
       answer="alpha";
       break;
      case 2:
       answer="beta";
       break;
      case 3:
       answer="gamma";
       break;
      case 4:
       answer="delta";
       break;
    }
	return answer;
}


function switchOfStuff(val) {
	let answer="";
		switch(val){
			case "a":
				answer="apple";
				break;
			case "b":
				answer="bird";
				break;
			case "c":
				answer="cat";
				break;
			default:
				answer="stuff";
				break;
		}
	return answer;
}
switchOfStuff(1);


function sequentialSizes(val) {
  let answer = "";
  // Only change code below this line
    switch(val) {
      case 1:
      case 2:
      case 3:
        answer ="Low";
        break;
      case 4:
      case 5:
      case 6:
        answer ="Mid";
        break;
      case 7:
      case 8:
      case 9:
        answer ="High";
        break;
    }
  // Only change code above this line
  return answer;
}		//trivial imo./


function abTest(a,b) {
	if(a<0){	return; }
	else if(b<0){ return; }
	return Math.round(Math.pow(Math.sqrt(a)+Math.sqrt(b),2));
}


//example with cards:
COUNT CHANGE:
+1		2,3,4,5,6
0		7,8,9
-1		10,'J','Q','K','A'.
let count=0;
function cc(card){
	if(card>=2 && card<=6){
		count++;
	} else if(card===10 || card==='J' || card==='Q' || card==='K' || card==='A' ) {
		count--;
	}
	if(count>0) {
		return count+'Bet';
	} else {
		return count + 'Hold';
	}
} cc(2); cc(3); cc(7); cc('K'); cc('A');


/////////////// OBJECTS ? /////
const myDog = {
	"name": "Reks",
	"legs": 4,
	"tails": 1,
	"friends": ["rik", "usiu"]
};
//	Acces object properties;
const testObj = {
	"hat": "ballcap",
	"shirt": "jersey",
};
const hatValue=testObj.hat;
const shirtValue=testObj.shirt;

/////////////// Or you can access properties with bracket notation.
cosnt testObj={
	"an entree": "hamburger",
	"the drink": "water"
};
const entreeValue=testObj["an entree"];
const drinkValue=testObj["the drink"];


const testObj={
	12:"Namath",
	16:"Montana",
	19:"Unitas"
};
const playerNumber=16;
const player = testObj[playerNumber];

const myDog = {
	"name": "Happy Coder!",
	"legs": 4,
	"tails": 1,
	"friends": ["freeCodeCamp Campers"]
};
myDog.bark="woof!" //new property.
myDog.name="Happy Coder";
delete myDog.tails; // delete property.
const value="name";
const nameLookup = myDog[value];	// +> Happy Coder! :O 


function phoneticLookup(val) {
	let result="";
	const lookup = {
		"alpha": "Adams",
		"bravo": "Boston",
		...
		"echo": "Easy"
	};
	result=lookup[val];
	return result;
} phoneticLookup("charlie");


testing properties-for object."
function checkForProperty(object, property) {
	return object.hasOwnProperty(property);
} 		checkForProperty({ top: 'hat', bottom: 'pants' }, 'top'); //true..
		checkForProperty({ top: 'hat', bottom: 'pants' }, 'middle'); //false..
/*	+ EXAMPLE +	*/
funciton checkObj(obj, checkProp) {
	if(obj.hasOwnProperty(checkProp)){
		return obj[checkProp];
	} else {
		return "Not Found";
	}
}


/////////// MANIPULATING COMPLEX OBJECTS ///////////////
const myMusic =[
 {
	"artist": "ZIOM",
	"title": "ZLOM",
	"release_year": 1999,
	"formats": [
		"CD",
		"LP"
	],
	"gold": true
 }, {
	"artist": "essyn"
	"title": "tsno",
	"release_year": 2002,
	 "formats": [
		"CD", "8T", "LP"
	],
	"gold":false
}


///////////// ACCESS NESTED OBJECTS ?////
const myStorage ={ 
	"car": {
		"inside": {
			"glove box": "maps",
			"passenger seat": "crumbs"
		},
		"outside": {
			"trunk": "jack"
		}
	}
};    const gloveBoxContents=myStorage.car.inside["glove box"];


///////////// ACCESS NESTED ARRAYS ?/////
const myPlants=[
 {
	type: "flowers",
	list: [
		"rose",
		"tulip",
		"dandelion"
	]
 },	{
	type: "trees",
	list: [
		"fir",
		"pine",
		"birch"
	]
 }
];	  const secondTree=myPlants[1].list[1];


///////////// RECORD COLLECTION WHAT EXERCISE?/////
/*  - Your function must always return the entire records object.
	- If value is an empty string, delete the given prop property from the album.
	- If prop isn't tracks and value isn't an empty string, assign the value to that album's prop.
	- If prop is tracks and value isn't an empty string, you need to update the album's tracks array. First, if the album does not have a tracks property, assign it an empty array. Then add the value as the last item in the album's tracks array.
*/
//setup:
const recordCollection = {
 2548: {
	albumTitle: 'Slipp',
	artist: 'Bon Jovi',
	tracks: ['Let It Rock', 'You Give Love a Bad Name'] 
 },
 2468: {
	albumTitle: '1999',
	artist: 'Prince',
	tracks: ['1999', 'Little Red Corvette']
 },
 1245: {
	artist: 'Robert Palmaer',
	tracks: []
 },
  5439: {
	albumTitle: 'ABBA Gold'
 }
};
function updateRecords(records, id, prop, value) {
	if(value === "") {
		delete records[id][prop];
	} else if (prop !== "tracks") {
		records[id][prop] =value;
	} else {
		if(!records[id].hasOwnProperty("tracks")){
			records[id]["tracks"]=[];
		} records[id]["tracks"].push(value);
	} return records;
}	//USAGE (DOWN))) 
updateRecords(recordCollection, 5439, 'artist', 'ABBA');
		
		
const myArray=[];
let i=5;
while(i>=0){
	myArray.push(i);
	i--;
}

const myArray=[];
for(let i=1; i<1-; i+=2) myArray.push(i);


const myArr=[2,3,4,5,6];
let total=0;
for(let i=0; i<myArr.length; i++){ total+=myArr[i]; }


///////////// NESTED FOR LOOPS MULTIPLY PRODUCT??//////
	//const arr=[	[1,2], [3,4], [5,6] ];
function multiplyAll(arr) {
	let product=1;
	for(let i=0; i<arr.length; i++) {
		for(let j=0; j<arr[i].length; j++) {
			product*=arr[i][j];
		}
	} return product;
} multiplyAll([1,2], [3,4], [5,6,7] ]);		//product: 5040.