npm install -g @angular/cli
ng new photoEditor
cd photoEditor 
ng serve --open //launch and open

npm i angular-cli-ghpages --save-dev
npm install -g @angular/cli@~15.2.5

npm i @nebular/auth --legacy-peer-deps 	//if normal instalation don't works.
you should use: npx nx migrate @nebular/theme@^11.0.0		//version for the tic tac toe game; )
then use: npm install
or: nx migrate --run-migrations
npm install @angular/service-worker		//network proxy -> needed for PWA

//deploying: 
ng add @angular/pwa@^0.803.4	// keyword "id" - deprecated, use "$id" for schema ID.
ng add @angular/fire@7.5.0

1/ First, you have to connect your firebase account > firebase login

2/ Next, check if the connection is alright (you need to create your project on firebase in a first place to see it in the result) > firebase projects:list

3/ Then, you need to initialize firebase > firebase init

4/ And now you can add the following command > ng add @angular/fire




since angular (nx) do not support straight-easy way to include and use a nebular(themes) you need to:
1. generate a lib (before: ng g lib theme ).
2. add styling manually, by exporting setups.
A component is a class that uses the @Component decorator to define its properties.
Create a component named MenuComponent, that can be called by the HTML tag <menu/>
@Component ({
	selector: 'menu',
	standalone: true,
	templateUrl: './menu.component.html',
	styleUrl: './menu.component.html'
})
export class MenuComponent{}

@Component({
	selector: 'menu',
	standalone: true,
	template: '<p>Hello</p>',
	styleUrl: './menu.component.html'
})
export class MenuComponent {}

or:
@component({
	selector: 'app-root',
	standalone: true,
	templateUrl: './app.component.html',
	styleUrl: './app.component.css'
})
export class AppComponent {}


-- CREATING COMPONENTS:
ng generate component Header --inline-template	`// creates a folder for the component files.

Ts file source:
@Component({
	selector: 'app-header',
	standalone: true,
	template: '',
	styleUrl: './app-header.component.css'
})
export class HeaderComponent {}

add some HTML to the copmponent's template property;
@Component({ 
	selector: 'app-header',
	template: '<h1>My Header</h1>'
})


1.now to use this component you have to include in in the 'app.component.html' file:
<app-header />
<p>Root Component</p>

2.then you need to add it to the  root component as dependency 'app.component.ts'
import {HeaderComponent}
from '../header/header.component';
 @Component({
	selector: 'app-root',
	standalone: true,
	templateUrl: './app.component.html',
	styleUrl: './app.component.css',
	imports: [HeaderComponent],
})
export class AppComponent {}.

then: in 'header.component.ts:  ' you can still edit styles or sth.
import { Component } from 
'@angular/core/';
@Component({
	selector: 'app-header',
	standalone: true,
	template: '<h1>My Header</h1>',
	styleUrl: './header.component.css',
})
export class HeaderComponent {}
++create a code to reference the template with the selector 'app-menu' in the 'app-header' component's inline template.
@Component({
	selector: 'app-header',
	standalone: true,
	template: '<app-menu/>'
})
export class HeaderComponent { }

isntead of angular (ng) now nx is being used.