export class GiftRegistry {
	private registry: Map<number, string[]>;
	constructor() {
		this.registry=new Map();
	}
	addGift(childId: number, gift: string){
		if(!this.registry.has(childId)) {
			this.registry.set(childId, []);
		}
		this.registry.get(childId)!.push(gift);	//the ! is used to assert that the result is not null or 	undefined.
	}
	getGiftsForChild(childId: number) {
		return this.registry.get(childId) || [];
	}
	removeGift(childId: number, gift: string) {
		const gifts = this.registry.get(childId);
		if(!gifts || !gifts.includes(gift)){
			throw new Error('Gift not found');
		}
		const index=gifts.indexOf(gift);
		gifts.splice(index, 1);
	}
//That's objcet oriented prog. [classes+ methods + modifying the state of the object].
}
////////////////////////// index.test.ts /////////////////////////////
import {GiftRegistry } form './index';
describe('GiftRegistry', ()=>{
	it('should retrieve all gifts for a given child ID', () => {
		const registry = new GiftRegistry();
		registry.addGift(1, 'teddy bear');
		registry.addGift(1, 'bicycle');
		registry.addGift(2, 'car model');
		expect(registry.getGiftsForChild(1)).toEqual(['teddy bear', 'bicycle']);
	});
	it('should handle removal of gifts correctly', () => {
		const registry=new GiftRegistry();
		registry.addGift(1, 'teddy bear');
		registry.addGift(1, 'bicycle');
		registry.removeGift(1, 'teddy bear');
		expect(registry.getGiftsForChild(1)).toEqual(['bicycle']);
		expect(registry.getGiftsForChild(1)).not.toContain('teddy bear');
	});
	it('should throw an error if trying to remove a gift that does not exist', () => {
		const registry = new GiftRegistry();
		registry.addGift(1, 'teddy bear');
		expect(() => registry.removeGift(1, 'puzzle')).toThrow('Gift not found');
	});
});

									use: npm test
////////////////////////////////////////////////// DAY2 ///////////////////////////////////////////
/index.test.ts/:
import { ChristmsaQueue } from './index';
describe('ChristmasQueue', () => {
	test('should enqueue and dequeue items based on priority', () => {
		const pq=new ChristmasQueue<string>();
		pq.enqueue('lowPriority', 1);
		pq.enqueue('highPriority', 3);
		pq.enqueue('mediumPriority', 2);
		pq.enqueue('highPriority', 3);
		pq.enqueue('lowPriority', 1);
		expect(pq.dequeue()).toBe('highPriority');
		 expect(pq.isEmpty()).toBe(true);
	});
	test('should handle same priority items in FIFO order', () => {
		const pq=new ChristmasQueue<string>();
		pq.enqueue('firstIn', 2);
		pq.enqueue('secondIn', 2);
		pq.enqueue('thirdin', 2);
		expect(pq.dequeue()).toBe('firstIn');
		expect(pq.dequeue()).toBe('secondIn');
		expect(pq.dequeue()).toBe('thirdIn');
	});
	test('should support complex types', () -> {
		const pq=new ChristmasQueue<{ giftName: string }>();
		pq.enqueue({ giftName: 'game console' }, 1);
		pq.enqueue({ giftName: 'snowboard' }, 2);
		pq.enqueue({ giftName: 'game console' }, 3);
		expect(pq.dequeue()).toStrictEqual({ giftName: 'christmas balls' });
		expect(pq.dequeue()).toStrictEqual({ giftName: 'snowboard' });
		expect(pq.dequeue()).toStrictEqual({ giftName: 'game console' });
	});
	test('should throw an error when dequeueing from an empty queue', () => {
		const pq = new ChristmasQueue<string>();
		expect(pq.isEmpty()).toBe(true);
		expect(() => pq.dequeue()).toThrow('There are no letters in the queue!');
	});
});

/index.ts/02-12-2023:
export class ChristmasQueue<T> {
	private items: {priority: number; value: T }[];
	constructor() {
		this.items=[];
	}
	enqueue(value: T, priority: number) {
		this.items.push({ priority, value });
		this.items.sort((a,b) => b.priority - a.priority);
	}
	dequeue(): T {
		if(this.isEmpty()) {
			throw new Error('There are no letters in the queue!');
		}
		return this.items.shift()!.value;
	}
	isEmpty(): boolean {
		return this.items.length === 0;
	}
}



////////////////////////////////////////////////// DAY3 ///////////////////////////////////////////
///index.test.ts/
import { Lokalizacja, MapaCzasoprzestrzenna, znajdzWorek } from './index';
describe('znajdzWorek', () => {
	test('powinien zwrocic lokalizacje z najwyzsza wartoscia mapy', () => {
		const lokalizacje: Lokalizacja[] = [
			{ x: 1, y: 2, z: 3, czas: 4 },
			{ x: 5, y; 6, z: 7, czas: 8 },
			{ x: 9, y: 10, z: 11, czas: 12 },
		];
		const mapa: MapaCzasoprzestrzenna = (x,y,z,czas)=> x+y+z+czas;
		const wynik = znajdzWorek(lokalizacje, mapa);
		expect(wynik).toEqual({ x: 9, y: 10, z: 11, czas: 12 });
	});
	test('powinien zwrócić null, gdy lista lokalizacji jest pusta', () => {
		const lokalizacje: Lokalizacja[] = [];
		const mapa: MapaCzasoprzestrzenna = jest.fn();
		const wynik = znajdzWorek(lokalizacje, mapa);
		expect(wynik).toBeNull();
	});
	test('powinien obsłużyć wartości niepoprawne matematycznie', () => {
		const lokalizacja: Lokalizacja[] = [
			{x: -1, y: -2, z: -3, czas: -4 },
			{z: 0, y: 0, z: 0, czas: 0 },
		];
		const mapa: MapaCzasoprzestrzenna = () => NaN;
		const wynik = znajdzWorek(lokalizacje, mapa);
		expect(wynik).toBeNull();
	});
});
///index.ts/
export interface Lokalizacja {
	x: number;
	y: number;
	z: number;
	czas: number;
}
export type MapaCzasoprzestrzenna = (x: number, y: number, z: number, czas: number) => number;
export function znajdzWorek(lokalizacje: Lokalizacja[], mapa: MapaCzasoprzestrzenna): Loklalizacja | null {
	if(lokalizacje.length === 0) {return null;}
	let maxScore = Number.NEGATIVE_INFINITY;
	let bestLocation: Lokalizacja | null = null;
	for(const lokalizacja of lokalizacje) {
		const score = mapa(lokalizacja.x, lokalizacja.y, lokalizacja.z, lokalizacja.czas);
		if(!isNaN(score) && score > maxScore) {
			maxScore = score;
			bestLocation = lokalizacja;
		)
	}
	return bestLocation;
}

////////////////////////////////////////////////// DAY4 ///////////////////////////////////////////
////index.test.ts/
import { memoize } from './index';
describe('memoize', () => {
	it('should memoize function results', ()=> {
		const complexCalculation = jest.fn().mockImplementation((x: number) => x * x);
		const memoizedCalculation = memoize(complexCalculation);
		expect(memoizedCalculation(2)).toBe(4);
		expect(memoizedCalculation(2)).toBe(4);
		expect(memoizedCalculation(3)).toBe(9);
		expect(memoizedCalculation).toHaveBeenCalledTimes(2);
	});
	it('should handle different arguments correctly', () => {
		const greeting = jest.fn().mockImplementation((p: string) => `${p}!`);
		const memoizedGreeting = memoize(greeting);
		expect(memoizedGreeting('John')).toBe('John!');
		expect(memoizedGreeting('Paul')).toBe('Paul!');
		expect(greeting).toHaveBeenCalledTimes(2);
	});
	it('should throw an error when non-function is memoized', () => {
		expect(() => memoize(42 as never)).toThrow('function in case to be memoized must be a function.');
	});
});

////index.ts/:
type Func = (...args: any[]) => any;
export function memoize(fn: Func): Func {
	if(typeof fn !== 'function') {
		throw new Error('Function to be memoized must be a function.');
	}
	const cache: Map<string, any> = new Map();
	return function (...args: any[]): any {
		const key=JSON.stringify(args);
		if(cache.has(key)){
			return cache.get(key);
		}
		const result = fn(...args);
		cache.set(key, result);
		return result;
	};
}
1. Type declaration: (type Func):
2. Function Signature (export function memoize(fn: Func): Func):
3. Type Check: (if (typeof fn !== 'function'){ throw new Error(...);} ):
4. Cachce Initialization (const cache: Map<string, any> = new Map(); ):
5. Memoized Function ( return function (...args: any[]): any { .... } ):
(that takes any nymber of arguments and returns any value ( => any ).



////////////////////////////////////////////////// DAY5 ///////////////////////////////////////////
/index.test.ts =====
import {ChristmasEmitter } from "./index";
describe('ChristmasEmitter', () => {
	it('should allow to subscribe and emit events', () => {
		const emitter = new ChristmasEmitter();
		const letterCallback = jest.fn();
		const giftCallback = jest.fn();
		emitter.on('letter', letterCallback);
		emitter.on('gift', giftCallback);
		emitter.emit('letter');
		expect(letterCallback).toHaveBeenCalled();
		expect(giftCallback).not.toHaveBeenCalled();
	});
	it('should handle multiple subscriber for the same event', () => {
		const emitter = new ChristmasEmitter();
		const firstMockCallback = jest.fn();
		const secondMockCallback = jest.fn();
		emitter.on('gift', firstMockCallback);
		emitter.on('gift', secondMockCallback);
		emitter.emit('gift');
		expect(firstMockCallback).toHaveBeenCalled();
		expect(secondMockCallback).toHaveBeenCalled();
	});
	it('should not call callbacks after they have been removed', () => {
		const emitter=new ChristmasEmitter();
		const mockCallback = jest.fn();
		emitter.on('letter', mockCallback);
		emitter.off('letter', mockCallback);
		emitter.emit('letter');
		expect(mockCallback).not.toHaveBeenCalled();
	});
});

/index.ts =====
type EventCallback = (...args: any[]) => void;
export class ChristmasEmitter {
	private events: Map<string, EventCallback[]>;
	constructor() {
		this.events = new Map();
	}
	on(event: string, callback: EventCallback) {
		if(!this.events.has(event)) {
			this.events.set(event, []);
		}
		this.events.get(event)!.push(callback);
	}
	off(event: string, callback: EventCallback) {
		const callbacks = this.events.get(event);
		if(callbacks) {
			const index = callbacks.indexOf(callback);
			if(index !== -1) {
				callbacks.splice(index, 1);
			}
		}
	}
	emit(event: string, ...args: any[]) {
		const callbacks = this.events.get(event);
		if(callbacks) {
			for(const callback of callbacks) {
				callback(...args);
			}
		}
	}
}
		
////////////////////////////////////////////////// DAY6 ///////////////////////////////////////////
/index.test.ts/ ======
import { OrderController, Machine } from './index';
describe('OrderController', () => {
	it('should notify all machines when orders change', () => {
		const controller = new OrderController();
		const machineA = new Machine();
		const machineB = new Machine();
		controller.registerMachine(machineA);
		controller.registerMachine(machineB);
		controller.setState('snowboards');
		expect(machineA.state).toBe('snowboards');
		expect(machineB.state).toBe('snowboards');
		controller.setState('game consoles');
		expect(machineA.state).toBe('game consoles');
		expect(machineB.state).toBe('game consoles');
	});
	it('should not notify machines after they have been unregistered', () => {
		const controller = new OrderController();
		const machineA = new Machine();
		const machineB = new Machine();
		controller.registerMachine(machineA);
		controller.registerMachine(machineB);
		controller.unregisterMachine(machineB);
		controller.setState('game consoles');
		expect(machineA.state).toBe('game consoles');
		expect(machineB.state).toBe(null);
	});
	it('should support machine auditing', () => {
		const controller = new OrderController();
		const machineA = new Macihne();
		controller.registerMachine(machineA);
		controller.setState('snowboards');
		controller.setState('game consoles');
		controller.setState('streaming gear');
		const audit = machineA.performAudit();
		expect(audit).toStrictEqual<string[]>([
			'Order #1 - snowboards',
			'Order #2 - game consoles',
			'Order #3 - streaming gear'
		]);
	});
	it('should throw an error if an invalid state is provided', () => {
		const controller =new OrderController();
		expect(() => {
			controller.setState('unknonwn');
		}).toThrow('Invalid state provided');
	})'
});

/ index.ts / ======
export class OrderController {
	machines: Machine[] = [];
	registerMachine(machine: Machine) {
		this.machines.push(machine);
	}
	unregisterMachine(machine: Machine) {
		const index = this.amchines.indexOf(machine);
		if(index !== -1) {
			this.machines.splice(index, 1);
		}
	}
	setState(newState: string) {
		if(!['snowboards', 'game consoles', 'streaming gear'].includes(newState)){
			throw new Error('Invalid state provided');
		}
		for(const machine of this.machines) {
			machine.updateState(newState);
		}
	}
}
export class Machine {
	state: string | null = null;
	orderHistory: string[] = [];
	updateState(newState: string) {
		this.state=newState;
		this.orderHistory.push(`Order #${this.orderHistory.length + 1} - ${newState}`);
	}
	performAudit(): string[] {
		return [...this.orderHistory];
	}
}

////////////////////////////////////////////////// DAY7 ///////////////////////////////////////////
// index.ts / =======
type Letter = { [key: string]: number };
export function createTrackedLetter(letter: Letter, changeTracker: (key: string, value: number) => void): Letter {
	const trackedLetter = new Proxy(letter, {
		set(target: Letter, key: string, value: numbeR) {
			const oldValue = target[key];
			if(oldValue !== value) {
				changeTracker(key as string, value);
			}
			target[key] = value;
			return true;
		},
	});
	return trackedLetter;
} //proxy used to create a tracked vers. of the letter-> whole function returns a tracked letter that triggers the changeTracker callback whenever a property is set to a new value.

// index.test.ts // =======
import { createTrackedLetter } from './index';
describe('Letter Tracker', () => {
	test('should create tracked letter correctly', () => {
		const letter" { [key:string]: number } = {};
		const changeTracker = jest.fn();
		const trackedLetter = createTrackedLetter(letter, changeTracker);
		trackedLetter.snowboards = 2;
		expect(changeTracker).toHaveBeenCalledWith('snowboards', 2);
		trackedLetter.snowboards = 0;
		expect(changeTracker).toHaveBeenCalledWith('snowboards', 0);
	});
	test('should avoid tracking stable items', () => {
		const letter = {snowboards: 5, consoles: 7};
		const changeTracker = jest.fn();
		const trackedLetter = createTrackedLetter(letter, changeTracker);
		trackedLetter.snowboards = 10;
		expect(changeTracker).toHaveBeenCalledTimes(1);
		expect(changeTracker).not.toHaveBeenCalledWoth('consoles', 7);
	});
});

////////////////////////////////////////////////// DAY8 ///////////////////////////////////////////
import { Letter, LetterSorter, PriorityStrategy, LengthStrategy, CountryStrategy } from './index';
describe('LetterSorter', () => {
	let letters: Letter[] = [];
	beforeEach(() => {
		letters = [
			{ content: 'Hi', country: 'us', priority: 'medium' },
			{ content: 'Halo', country: 'de', priority: 'low' },
			{ content: 'Cześć', country: 'pl', priority: 'high' }
		];
	});
	test('should sort letters by priority', () => {
		const sorter = new LetterSorter(new PriorityStrategy());
		const sortedLetters = sorter.sortLetters(letter);
		expect(sortedLetters).toEqual([
			{ content: 'Cześć', country: 'pl', priority: 'high' },
			{ content: 'Hi', country: 'us', priority: 'medium' },
			{ content: 'Halo', country: 'de', priority: 'low' }
		]);
	});
	test('should sort letters by country', () => {
		const sorter = new LetterSorter(new CountryStrategy());
		const sortedLetters = sorter.sortLetters(letters);
		expect(sortedLetter).toEqual([
			{ content: 'Cześć', country: 'pl', priority: 'high' },
			{ content: 'Halo', country: 'de', priority: 'low' },
			{ content: 'Hi', country: 'us', priority: 'medium' }
		]);
	test('should sort letters by length', () => {
		const sorter = new LetterSorter(new LengthStrategy());
		const sortedLetters = sorter.sortLetters(letters);
		expect(sortedLetters).toEqual([
			{ content: 'Hi', country: 'us', priority: 'medium' },
			{ content: 'Halo', country: 'de', priority: 'low' },
			{ content: 'Cześć', country: 'pl', priority: 'high' }
		]);
	});
});

//=index.ts=////////
export interface Letter {
	content: string;
	country: string;
	priority: 'low' | 'medium' | 'high';
}
export interface SortStrategy { 
	compare(a: Letter, b: Letter): number;
}
export class PriorityStrategy implements SortStrategy {
	compare(a: Letter, b:Letter): number {
		const priorityOrder = { low: 2, medium: 1, high: 0 };
		return priorityOrder[a.priority] - priorityOrder[b.priority];
	}
}
export class LengthStrategy implements SortStrategy {
	compare(a:Letter, b:Letter):number {
		return a.content.length - b.content.length;
	}
}
export class CountryStrategy implements SortStrategy {
	private countryOrder: { [key: string]: number } = { pl: 1, de: 2, us: 3};
	compare(a:Letter, b:Letter):number {
		const orderA = this.countryOrder[a.country] || Number.MAX_SAFE_INTEGER;
		const orderB = this.countryOrder[b.country] || Number.MAX_SAFE_INTEGER;
		return orderA - orderB;
	}
}
export class LetterSorter {
	private strategyt: SortStrategy;
	constructor(strategy: SortStrategy) {
		this.startegy= strategy;
	}
	sortLetters(letters: Letter[]): Letter[] {
		return letters.slice().sort((a,b)=>this.strategy.compare(a,b));
	}
}
////////////////////////////////////////////////// DAY9 ///////////////////////////////////////////
;index.ts;
export interface Tool {
	init(): void;
	update(): void;
	dispose(): void;
}
export class Equipment {
	private tools: Tool[] = [];
	private initialized: boolean = false;
	registerTools(...tools: Tool[]) {
		this.tools.push(...tools);
	}
	initializeTools() {
		if(this.initialized) {
			throw new Error('Tools have already been initialized.');
		}
		for(const tool of this.tools) {
			tool.init();
		}
		this.initialized = true;
	}
	updateTools() {
		if(!this.initialized) {
			throw new Error('Cannot update any tools before initialization.');
		}
		for(const tool of this.tools) {
			tool.update();
		}
	}
	disposeTools() {
		if(!this.initialized) {
			throw new Error('Cannot dispose any tools before initialization.');
		}
		for(const tool of this.tools){
			tool.dispose();
		}
		this.initialized = false;
	}
}

;index.test.ts;
import {Equipment } from './index';
describe('Equipment Tests', () => {
	test('Equipment initializes, updates, and disposes tools correctly', () => {
		const eq=new Equipment();
		const mockTool = { init: jest.fn(), update: jest.fn(), dispose: jest.fn() };
		eq.registerTools(mockTool);
		eq.initializeTools();
		eq.updateTools();
		eq.disposeTools();
		expect(mockTool.init).toHaveBeenCalledTimes(1);
		expect(mockTool.update).toHaveBeenCalledTimes(1);
		expect(mockTool.dispose).toHaveBeenCalledTimes(1);
	});
	test('Equipment handles multiple tools independently', () => {
		const eq=new Equipment();
		const mockToolA = { init: jest.fn(), update: jest.fn(), dispose: jest.fn() };
		const mockToolB = { init: jest.fn(), update: jest.fn(), dispose: jest.fn() };
		eq.registerTools(mockToolA);
		eq.registerTools(mockToolB);
		eq.initializeTools();
		eq.disposeTools();
		expect(mockToolA.init).toHaveBeenCalledTimes(1);
		expect(mockToolA.init).toHaveBeenCalledTimes(1);
		expect(mockToolA.dispose).toHaveBeenCalledTimes(1);
		expect(mockToolA.dispose).toHaveBeenCalledTimes(1);
		expect(mockToolA.update).toHaveBeenCalled();
		expect(mockToolB.update).toHaveBeenCalled();
	});
	test('Equipment throws an error when trying to update before initialization', () => { 
		const eq = new Equipment();
		const mockTool = { init: jest.fn(), update: jest.fn(), dispose: jest.fn() };
		eq.registerTools(mockTool);
		expect(() => eq.updateTools()).toThrow('Cannot update any tools before initialization.');
	});
});
////////////////////////////////////////////////// DAY10 ///////////////////////////////////////////
/index.test.ts/ =
import {findCyclesBetweenLocations} from './index';
test('finds cycles in location graph', () => {
	const graph = {
		'North Pole': ['London', 'New York'],
		London: ['Paris'],
		Paris: ['Berlin', 'Madrid'],
		Berlin: ['North Pole'],
		Madrid: [],
		'New York': ['North Pole'],
	};
	expect(findCyclesBetweenLocations(graph)).toEqual([
		['North Pole', 'London', 'Paris', 'Berlin', 'North Pole'],
		['North Pole', 'New York', 'North Pole'],
	]);
});
test('handles a graph with no cycles between locations', () => {
	const graph = {
		'North Pole': ['London', 'New York'],
		London: ['Paris'],
		Paris: ['Berlin'],
		Berlin: [],
		Madrid: [],
		'New York': ['Madrid'],
	};
	expect(findCyclesBetweenLocations(graph)).toEqual([]);
});
test('throws an error for invalid input', () => {
	const invalidGraph = {
		'North Pole': ['London', 'New York'],
		London: ['Paris'],
		Paris: ['Berlin', 'Madrid'],
		'New York': ['North Pole'],
	};
	expect(() => findCyclesBetweenLocations(invalidGraph)).toThrow('Invalid graph: missing nodes');
});

/index.ts/ =
export function findCyclesBetweenLocations(graph: Record<string, string[]>): string[][] {
	const visited = new Set<string>();
	const cycles: string[][] = [];
	function dfs(node: string, path: string[] = []) {
		visited.add(node);
		path.push(node);
		for(const neighbor of graph[node]) {
			if(!graph[neighbor]) {
				throw new Error('Invalid graph: missing nodes');
			}
			if(!visited.has(neighbor)) {
				dfs(neighbor, path.slice());
			} else if ( path.includes(neighbor)) {
				const cycle = path.slice(path.indexOf(neighbor));
				cycle.push(neighbor);
				cycles.push(cycle);
			}
		}
	}
	for(const node in graph) {
		if(!visited.has(node)) {
			dfs(node);
		}
	}
	return cycles;
}
////////////////////////////////////////////////// DAY11 ///////////////////////////////////////////
class PriorityQueue { 
	private queue: [string, number][];
	constructor() {
		this.queue=[];
	}
	enqueue(item: [string, number]): void {
		if(this.isEmpty()) {
			this.queue. push(item);
		} else {
			let added = false;
			for(let i=0; i<this.queue.length; i++) {
				if(item[1] < this.queue[i][1]) {
					this.queue.splice(i, 0, item);
					added=true;
					break;
				}
			}
			if(!added) {
				this.queue.push(item);
			}
		}
	}
	dequeue(): [string, number] {
		return this.queue.shift() as [string, number];
	}
	isEmpty(): boolean {
		return this.queue.length === 0;
	}
}

export interface WeightedGraph {
	[key: string]: { [key: string]: number };
}
export function findShortestPath(graph: WeightedGraph, start: string, end: string): string[] | null {
	const costs: { [key: string]: number } = {};
	const paths: { [key: string]: string[] } = { [start]: [] };
	const pq = new PriorityQueue();
	pq.enqueue([start, 0]);
	while(!pq.isEmpty()) {
		const [node, cost] = pq.dequeue();
		if(costs[node] !== undefined && cost > costs[node]) continue;
		costs[node] = cost;
		for(let neighbor in graph[node]) {
			let newCost = cost + graph[node][neighbor];
			if(costs[neighbor] === undefined || newCost < costs[neighbor]) {
				costs[neighbor] = newCost;
				paths[neighbor[ = [...paths[node], node];
				pq.enqueue([neighbor, newCost]);
			}
		}
	}
	if(!graph[start] || !graph[end]) {
		throw new Error('Invalid or non-existent route');
	}
	if(costs[end] === undefined) {
		return null;
	}
	return [...paths[end], end];
}

/index.test.ts/ =======
import { findShortestPath } from './index';
describe('findShortestPath', () => {
	it('should return the shortest path between cities', () => {
		const graph = {
			London: { Paris:1, Berlin:4 },
			Paris: { London:1, Berlin:2, Tokyo:5 },
			Berlin: { London:4, Paris:2, Tokyo:1 },
			Tokyo: { Paris:5, Berlin:1 }
		};
		expect(findShortestPath(graph, 'London', 'Tokyo')).toEqual(['London', 'Paris', 'Berlin', 'Tokyo']);
	});
	it('should handle cities with no connection between them', () => {
		const graph = {
			London: { Paris: 1 },
			Paris: { London: 1 },
			Tokyo: { Beijing: 1 },
			Beijing: { Tokyo: 1 }
		};
		expect(findShortestPath(graph, 'London', 'Beijing')).toBeNull();
	});
	it('should throw an error for invalid or non-existent routes', () => {
		const graph = { 
			London: { Berlin: 1, Paris: 2 },
			Berlin: { London: 1 }
		};
		expec(() => findShortestPath(graph, 'London', 'Fankfurt')).toThorw('Invalid or non-existent route');
	});
});
////////////////////////////////////////////////// DAY7 ///////////////////////////////////////////
////////////////////////////////////////////////// DAY7 ///////////////////////////////////////////
////////////////////////////////////////////////// DAY7 ///////////////////////////////////////////
////////////////////////////////////////////////// DAY7 ///////////////////////////////////////////