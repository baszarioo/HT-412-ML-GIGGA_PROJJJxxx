Step1: Add the <!DOCTYPE html> tag, and an html element with a lang attribute of en.
=
Step2: Add a head element within the html element, so you can add a title element.
=
Step3: Inside the head element, nest a meta element with an attribute named charset set to the value utf-8 to tell the browser how to ...
:
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Cafe Menu</title>
    <meta charset="utf-8">
</head>
</html>

Step4: ... add a body element below the head element.
Step5: Add a main element within the existing body element.
Step6: Add an h1 element within your main element..

...
Step7: add a p element below the h1 element with the text: .
Step8: Add a section element within the main element so you have a place to put all the....
Step9: Create an h2 element in the section element and give it the text Coffee.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Cafe Menu</title>
</head>
<body>
    <main>
        <h1>CAMPER CAFE</h1>
        <p>Est. 2020</p>
        <section>
            <h2>Coffee</h2>
        </section>
    </main>
</body>
</html>

Step10: To start taking control, add a style element within the head element.
Step11:  //element { property: value; }## Center your h1 element by setting its text-align property to the value center.
Step12: Center the h2 and p elements by adding a new type selector for each one to the existing style element.
...
Step13: //selector1, selector2 { property: value; } ## Delete the three existing type selectors and replace them iwth one selector list that centers the text for the h1, h2, and p elements.
Step14: Start by rewriting the styles you have created into the styles.css file. Make sure to exclude the opening and closing style tags.
Step15: ... remove the style element [from html file] and all its content.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Cafe Menu</title>
</head>
<body>
    <main>
        <h1>CAMPER CAFE</h1>
        <p>Est. 2020</p>
        <section>
            <h2>Coffee</h2>
        </section>
    </main>
</body>
</html>
--styles.css:
h1, h2, p {
    text-align: center;
}

Step16: Nest a self-closing ink element in the head element Give it a rel attribute value stylesheet and an href attribue value of styles.css
Step17: ... you need to add a meta element with a special content attribute.: <meta name="viewport" content="width=device-width, initial-scale=1.0" />
Step18: Add another style to the file that changes the background-color property to brown for the body element.
Step19: change the body elemnt's background color to burlywood.
Step2-: Add a div element inside the body element and then move all the other elements inside the new duv. Add the id attribue = menu.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Cafe Menu</title>
</head>
<body>
    <div id="menu">
    <main>
        <h1>CAMPER CAFE</h1>
        <p>Est. 2020</p>
        <section>
            <h2>Coffee</h2>
        </section>
    </main>
    </div>
</body>
</html>
--styles.css:
body {
    background-color: burlywood;
}
h1, h2, p {
    text-align: center;
}

step21: #menu {
  width:300px;
}
Step22: comment = /* ... */
Step23: set the div element inside the #menu into burlywood color.
Step24: set the width inside of #menu to the 80%
Step25: center the #menu horizontally: set maring-left + margin-right to auto.
Step26: Change the existing #menu selector into a class selector by replacing #menu with a class named .menu.
Step27: To apply the class's styling to the div element, remove the id attribute and add a class attribute to the div element's opening tag. background-image:url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)
Step28/29: Add an empty article.
Step30:  Nest two p elements inside article element.
Step31: 5x {step 30}
Step32: Add the flavor class to the p element.
Step33: for flavor class set the text-align value to the left.
Step34: add the price class for the other p element.
Step35: Now align the text to the right for the elements with the price class.
Step36: We want to achieve the "inline" behaviour for elements. Add the class with value of item to the articles.
Step37: using the .item p {} selector, add a display property with value inline-block, so the p elements behave more like inline elements.
Step38: inline-block elements only take up the width of their content. Spread them out, adding a width property to the flavor and price class selectors that have a value of 50% each.
Step39: It didn't work, change their width to 49%;
Step40: You could instead of that, place the both p elements on the same line.
Step41: set the width of these elements back to 50%;
Step42: do that 5x.
skip43.
skip44.
Step45: 75%/25% for flavor/price widths.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Cafe Menu</title>
</head>
<body>
    <div id="menu">
    <main>
        <h1>CAMPER CAFE</h1>
        <p>Est. 2020</p>
        <section>
            <h2>Coffee</h2>
            <article class="item">
                <p class="flavor">French Vanilla</p><p class="price">3.00</p>
            </article>
            ...
        </section>
    </main>
    </div>
</body>
</html>
--styles.css:
body {
    background-image: url(https://xddd.xdd/xd.jpg);
}
h1, h2, p {
    text-align: center;
}
.menu {
    width:80%;
    background-color: burlywood;
    margin-left: auto;
    margin-right: auto;
}
.item p{
    display: inline-block;
}
.flavor{
    text-align: left;
    width: 75%;
}
.price{
    text-align: center;
    width: 25%;
}

Step46: add 2nd section item.
Step47: add an h2 element in the new section.
Step48: add an empty article and give it a class attribute with the value = item.
Step49: nest two p elements inside new article element.
Step50: classes: dessert vs price.
Step51: in the CSS add the dessert rule into the existing 'flavor' one.
Step52: 3x articles.
Step53: padding-left + padding-right for .menu
Step54: padding-top + padding-bottom.
Step55: delete all existing paddings and add a single padding.
Step56: Set the max-width for menu to 500px
Step57: set the font family for body: font-family: sans-serif;
Step58: style both the h1 and the h2 elements with a new selector, with the Impact font.
Step59: Add the fallback font serif after the Impact font. = font-family: Impact, serif;
Step60: Create an established class selector and give it the font-style property with the value = italic.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cafe Menu</title>
    <link href="styles.css" rel="stylesheet"/>
</head>
<body>
    <div class="menu">
    <main>
        <h1>CAMPER CAFE</h1>
        <p>Est. 2020</p>
        <section>
            <h2>Coffee</h2>
            <article class="item">
                <p class="flavor">French Vanilla</p><p class="price">3.00</p>
            </article>
            ...
        </section>
        <section>
            <h2>Desserts</h2>
            <article class="item">
                <p class="dessert">Donut</p><p class="price">1.50</p>
            </article>
        </section>
     </main>
    </div>
 </body>
</html>
--styles.css:
body {
    background-image: url(https://xddd.xdd/xd.jpg);
    font-family: sans-serif;
}
.established {
    font-style: italic;
}
h1, h2, p {
    text-align: center;
}
.menu {
    width:80%;
    background-color: burlywood;
    margin-left: auto;
    margin-right: auto;
    padding: 20px;
    max-width: 500px;
}
h1,h2 {
    font-family: Impact, serif;   
}
.item p{
    display: inline-block;
}
.flavor, .dessert{
    text-align: left;
    width: 75%;
}
.price{
    text-align: center;
    width: 25%;
}



Step61: Apply the established class to the Est.2020;
Step62: Add two new type selectors (h1 and h2). Use the font-size property for both, but use the value 40px for the h1 and 30px for the h2.
Step63: Add a footer element below the main element, where you can add some additional information.
Step64: Inside the footer, add a p element. Then, nest an anchor (a) element in the p that links to...
Step65: Add a second p element.

<footer>
    <p>
        <a href="https://www...." target="_blank">Visit our website</a>
    </p>
    <p>
        123 Free Code Camp Drive
    </p>
</footer>

Step66: You can use an ht element to display a divider between sections of different content/ hr' elements are self closing btw. //that's that big underline.
Step67: Change the height of the hr element to be 3px (css).
Step68: Set the background-color for the hr element to brown.
Step69: Set the borders of the hr the same as the background's..
Step70: Set the height of the hr to 2px, so total height (incl. border) is 4px.
Step71: Add another hr element between the main element and the footer element.
Step72: To create a little more room around the menu, add 20 px inside of the body element - using padding.
Step73: Target all the p elements nested in elements with the class named item and set their top and bottom margin to be 5px.
Step74: Using the same style selector in the previous step, make the font size of the items and prices larger by using a value of 18x.
Step75: Create the class "bottom-line" using the 25px for the margin-top property.


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cafe Menu</title>
    <link href="styles.css" rel="stylesheet"/>
</head>
<body>
    <div class="menu">
    <main>
        <h1>CAMPER CAFE</h1>
        <p class="established">Est. 2020</p>
        <hr>
        <section>
            <h2>Coffee</h2>
            <article class="item">
                <p class="flavor">French Vanilla</p><p class="price">3.00</p>
            </article>
            ...
        </section>
        <section>
            <h2>Desserts</h2>
            <article class="item">
                <p class="dessert">Donut</p><p class="price">1.50</p>
            </article>
        </section>
     </main>
     <hr>
     <footer>
        <p>
            <a href="https://..." target="_blank">Visit our website</a>
        </p>
        <p>123 Free Coding Camp Drive by </p>
     </footer>
    </div>
 </body>
</html>
--styles.css:
body {
    background-image: url(https://xddd.xdd/xd.jpg);
    font-family: sans-serif;
    padding:20px;
}
h1{
    font-size:40px;
}
h2{
    font-size:30px;
}
.established {
    font-style: italic;
}
h1, h2, p {
    text-align: center;
}
.menu {
    width:80%;
    background-color: burlywood;
    margin-left: auto;
    margin-right: auto;
    padding: 20px;
    max-width: 500px;
}
hr{
    height:2px;
    background-color:brown;
    border-color:brown;
}
.bottom-line{
    margin-top:25px;
}
h1,h2 {
    font-family: Impact, serif;   
}
.item p{
    display: inline-block;
    margin-top: 5px;
    margin-bottom: 5px;
    font-size: 18px;
}
.flavor, .dessert{
    text-align: left;
    width: 75%;
}
.price{
    text-align: center;
    width: 25%;
OK?

Step76: add the bottom-line class to the 2nd hr element.
Step77: Now you're about to style the footer. Add a comment = FOOTER.
Step78: Apply to all the text in the footer the font-size of 14px.
Step79: Make the footer links the same color regardless if a link has been visited, use a type selector for anchor element(a) and use the value black for the color property.
Step80: Change the color of the footer 'Visit our website' link to be grey when a user has visited the link.
Step81: Change the color of the footer, like above to be brown when a user hovers over it.