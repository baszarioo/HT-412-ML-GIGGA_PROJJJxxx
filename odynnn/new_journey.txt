git checkout -b fix-typo	//new branch
git add .	//all files
git commit -m "fixed a typo"
git push || git push  --set-upstream origin branch-name
arduous = trudny/meczacy/zmudny/mozolny
GIT SETUP:
git config --global user.name "Your Name"
git config --global user.email "yourname@example.com"
git config --global init.defaultBranch main
git config --global init.defaultBranch main
git config --global color.ui auto
git config --global pull.rebase false

verify:
git config --get user.name
git config --get user.email

macOS:
echo .DS_Store >> ~/.gitignore_global
git config --global core.excludesfile ~/.gitignore_global

STEP2.3: Create an SSH key.
ls ~/.ssh/id_ed25519.pub
ssh-keyen -t ed25519 -C "your@email.com"

copy public SSH key:
cat ~/.ssh/id_ed25519.pub
=> highlight and copy the output, which starts with ssh-ed25519 and ends with your email address.
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">

__________________________________________
<ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul>	// unordered-begins with bullet pnt
<ol> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ol>	// ordered, begins with nums=1,2...
 <img src="https://www.theodinproject.com/mstile-310x310.png"> // use an image ..
 
 
 #!/bin/sh
"C:\Program Files\JetBrains\IntelliJ IDEA 2022.3.1\bin\idea64.exe" $1 &


__________________________________________
exampl;
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Pop culture recipes!</title>
	</head>
	<body>
		<h1 id='header'>Recipes from pop culuture!</h1>
		<img src='images/chef-boyardee.jpg' alt='a talented chef by the name of boyardee' style="width:800px; height:450px;">
		<h3 id='image label'>poppin recipes!</h3>
		<div>
			<ul>
				<li><a href='./recipes/golf-wang.html'>Tyler</a></li>
				<li><a href='./recipes/disco-ba.html'>Disco Bania</a></li>
				<li><a href='./recipes/wszystki.html'>Deamm</a></li>
			</ul>
		</div>
		<a href="#header">Return to top</a>
	</body>
</html>

//class="alert-text severe-alert"

/*	GROUPIN SELECTOR 	*/
.read {
	color: white;
	background-color: black;
}
.unread {
	color: white;
	background-color: black;
}

/*	CHAINING SELECTORS	*/
<div> 
	<div class="subsection header">Latest Posts</div>
	<p class="subsection preview">preview for a post:</p>
</div>
	//CSS
.subsection.header {
	color: red;
}	
		//but:"\

<div>
	<div class="subsection header">Latest Posts</div>
	<p class="subsection" id="preview">post preview: </p>
</div>
		//CSS
.subsection.header{
	color: red;
}
.subsection#preview {
	color: blue;
}

/*	DESCENDANT COMBINATOR 	*/
<div class="ancestor">
	<!-- A -->
	<div class="contents">
		<!-- B -->
		<div class="contents"><!-- C --></div>
	</div>
</div>

<div class="contents"></div> <!-- D -->
		//CSS
.ancestor .contents {
	/* D not affected, versus B,C,A which are. */
}	
__________________________________________
* The cascade *
1) 
<div class="main">
	<div class="list subsection">Red text</div>
</div>

/* rule 1 */
.subsection {	color: blue;	}
/* rule 2 */
.main .list {	color: red;		}		// color: red; declaration takes the precedence.

2)
<div class="main">
	<div class="list" id="subsection">Blue text</div>
</div>
/* rule 1 */
#subsection {	color: blue; 	}
/* rule 2 */
.main .list {	color: red;		}		// now ID beats class selector: -> color: blue; tops

3)
<div class="main">
	<div class="list" id="subsection">Red text on yellow background</div>
</div>
/* rule 1 *.
#subsection {
	background-color: yellow;
	color: blue;
}
/* rule 2 */
.main #subsection {
	color: red;  } /* both rules has only one ID selector, but one with a class has a higher specificity -> color: red takes precedence, but background-color: yellow is still aplied */

4) COMPARING SELECTORS:
.class.second-class == .class .second-class
.class.second-class == .class > .second-class
* <= h1 	//becase rule 1 is more universal.\

5) INHERITANCE EXCEPTION:
<div id="parent">
	<div class="child"></div>
</div>
/* styles.css */
#parent {	color: red;		}
.child { color: blue; 	}		//despite the parent element having a higher specificity with // an ID, the child element would have color: blue, since it is directly targeted.

EXERCISE FIX THAT:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fix the Cascade</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <p class="para">I'm just a paragraph with extra bold text!</p>
    <p class="para small-para">I'm a smaller paragraph, also with extra bold text!</p>

    <button id="confirm-button" class="button confirm">Confirm</button>
    <button id="cancel-button" class="button cancel">Cancel</button>

    <div class="text">I'm a div with thin text!</div>
    <div class="text">I'm a div with thin text and a child div!
      <div class="text child">I'm a smaller child div with extra bold text.</div>
    </div>
  </body>
</html>
+
/* styles.css */
+
body { font-family: Arial, Helvetica, sans-serif;	}
.para, .small-para {
	color: hsl(0,0%,0%);
	font-weight: 800;
}
.small-para {
	font-size:14px;
	font-weight: 8900;
}
.para {
  font-size: 22px;
}

/*
.confirm {
  background: green;
  color: white;
  font-weight: bold;
} 
*/
#confirm-button {
	background: green;
	color: white;
	font-weight: bold;
}
.button {
  background-color: rgb(255, 255, 255);
  color: rgb(0, 0, 0);
  font-size: 20px;
}
/*
.child {
  color: rgb(0, 0, 0);
  font-weight: 800;
  font-size: 14px;
}
*/
.text .child {
	color: rgb(0,0,0);
	font-weight: 800;
	font-size: 14px;
}
||
div .child {
	color: rgb(0,0,0);
	font-weight: 800;
	font-size: 14px;
}	

div.text {
  color: rgb(0, 0, 0);
  font-size: 22px;
  font-weight: 100;
}

__________________________________________ BLOCK AND INLINE:
display: block => stacked on each other,		||w3schools.com||
display: inline-block	=> stacked on each other horizontally
<p> is a block-level
<div> is also a block-level
block-level elements:	
<address> <article> <aside> <blockquote> <canvas> <dd> <div> <dl> <dt> <fieldset> <figcaption> <figure> <footer> <form> <h1-h6> <header> <hr> <li> <main> <nav> <noscript> <ol> <p> <pre> <section> <table> <tfoot> <ul> <video>
:: <dl> =description list, <dd> = description.description pepeW, <dt> = description term 

inline elements: <do not start on a new line>
<a> <abbr> <acronym> <b> <bdo> <big> <br> <button> <cite> <code> <dfn> <em> <i> <img> <input> <kbd> <label> <map> <object> <output> <q> <samp> <script> <select> <small> <span> <strong> <sub> <sup> <textarea> <time> <tt> <var>
::The <abbr title="World Health Organization">WHO</abbr> was founded in 1948. 	//skr√≥cona nazwa
::<acronym> got replaced with an <abbr> tag.
::<b> bold text lul
::<bdo> text will go from right-to-left: amaM
::<cite> //italic font text claiming it has a title of artwork.
::<code> //gives text some kind of different font + size. 
::<dfn> //definition same as above, different styling.;
::<em> //emphasis
::<i> //italic.
::<kbd> //keyboard input' styling.
::<map> //image map?
::<object> //examples below.
::<output>	// result of some formula?	example below;
::<sub> // subscript (text below).
::<sup> // superscript (text above).
::<time> // doesn't even work i guess.
::<var></var> // italicizes a text and makes it a mathematical(?) variable.

example of <map>:
<p> Click on some coordinates, to go to a new page and read more about the topic. </p>
<img src="workplace.jpg" alt="Workplace" usemap="#workmap" width="400" heiht="379">
<map name="workmap">
	<area shape="rect" coords="34,44,270,350" alt="Computer" href="computer.htm">
	<area shape="rect" coords="290,172,333,250" alt="Phone" href="phone.htm">
	<area shape="circle" coords="337,300,44" alt="Cup of coffee" href="coffee.htm">
</map>
</body>
</html>


example of <object> 3x:	//embedded = osadzony (in sth).
<object data="pic_trulli.jpg" width="300" height="200"></object>
<object data="snippet.html" width="500" height="200"></object>
<object data="video.mp4" width="400" height="300"></object>
object:focus {	outline: none;	}	//default value.


example of <output>:
<form oninput="x.value=parseInt(a.value)+parseInt(b.value)">
	<input type="range" id="a" value="50">
	+ <input type="number" id="b" value="25">
	= <output name="x" for="a b"></output>
</form>
<p><strong>Note:</strong> The output element is not supported in Edge 12(or earlier).</p>
</body> </html>

flex-item + flex-container
.flex-container {	display:flex;	} //makes elements be displayed in a line.
.flex-container div { ... flex: 1 1 0%; } //flex - divides them equally.
.flex-container .two { flex: 2 1 0%;	} //makes the 2nd box widthier?
flex-shrink :can make the same
flex-basis : sets innitial size.
flex-grow..

__________________________________________ LANDING PAGE PROJECTS: @deanstro + @Criosyom