and*e*jh271:
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>ETCHY SKETCHY üêßü§•</title>
		<link rel="stylesheet" href="style.css">
		<link href="https://fonts.googleapis.com/css2?family=Indie+Flower&family=League+Script&display=swap" rel="stylesheet">
	</head>
	<body>
		<h3>Sketchy plancheyy</h3>
		<div id ='controls-container'>
			<p>Click inside grid to toggle pen</p>
			<button id='clear'>Clear</button>
			<div id='new-container'>
				<button id='new-grid'>New</button>
				<input id='new-size' type='range' min='1' max="100" defaultValue="16">
				<label id='size-label' for='grid-size'></label>
			</div>
			<form id="radio-buttons">
				<input type="radio" name="color" value="default">
				<label for="blue">Blue</label><br>
				<input type="radio" name="color" value="random1">
				<label for="random1">Random 1</label><br>
				<input type="radio" name="color" value="random2">
				<label for="random2">Random 2</label><br>
				<input type="radio" name="color" value="random3">
				<label for="random3">Random 3</label><br>
				<input type="radio" name="color" value="darken">
				<label for="incrementally-darken">Incrementally Darken</label><br>
				<input type="radio" name="color" value="user">
				<label for="color-picker">Choose your own... &emsp;</label>
				<input id="color-picker" type="color">
			</form>
		</div>
		<div id='grid-container'> </div>
	</body>
	<script type="text/javascript" src="script.js"></script>
</html>

--1.b: CSS
html {
	margin: 0;
	padding: 0;
}
body {
	margin: 0;
	padding: 0;
	background-color: #80f718;
	font-family: 'Indie Flower', cursive;
}
h3{
	text-align: center;
	margin: 4vh;
	font-family: 'League Script', cursive;
	color: red;
	font-size: 5vw;
}
#controls-container {
	display: flex;
	float: left;
	flex-direction: column;
	justify-content: space-between;
	margin-left: 9vw;
	margin-top: 1vh;
	width: 24vw;
	padding: 0;
	height: 38vw;
}
p { 
	font-size: 2vw;
}
button {
	font-family: 'Indie Flower', cursive;
	background-color: #3ba1c9;
	color: rgb(0,0,0);
	border-radius: 24px;
	border: 1px solid white;
	width: 22vw;
	height: 3vh;
}
button:focus {
	outline: none;
}
#clear {
	position: relative;
	bottom: 2vw;
	background-color: #3ba1c9;
}
#clear:hover {
	box-shadow: 0 6px 6px rgba(0,0,0,0.199);
	background-color: #042b50;
	color: white;
	border: 1px solid #c6c6c6;
	text-decoration: none;
	transition: all .3s ease;
	color: #d9f3ed;
}
#clear:active {
	border: 1px solid #300a0a;
	transition: all 0s ease;
	background-color: #7bcfb3;
	color: white;
	box-shadow: 0 6px 6px rgba(0,0,0,0.199);
}
#new-container {
  line-height: 40px;
}
#new-grid {
  display: block;
  background-color: #f35858de;
}
#new-grid:hover {
  box-shadow: 0 6px 6px rgba(0, 0, 0, 0.199);
  background-color: #500d04;
  color: white;
  border: 1px solid #c6c6c6;
  text-decoration: none;
  transition: all .3s ease;
  color: #d9f3ed;
}
#new-grid:active {
  border: 1px solid #300a0a;
  transition: all 0s ease;
  background-color: #7bcfb3;
  color: white;
  box-shadow: 0 6px 6px rgba(0, 0, 0, 0.199);
}
#new-size {
  width: 19vw;
}
#size-label {
  width: 3vw;
  font-size: 1.5vw;
  color: #7b68ee;
}
/* Radio buttons */
#radio-buttons {
  line-height: 35px;
}
/* Main Grid */
#grid-container {
  float: right;
  margin-top: 1vh;
  margin-right: 6vw;
  box-sizing: content-box;
  display: grid;
  height: 49vw;
  width: 49vw;
  border: 1px rgba(0, 0, 0, 0.404) solid;
}

.cell {
	border: 1px rgba(0,0,0,0.041) solid;background-color: rgba(255,255,255,1);
}
.cell:hover {
	background-color: aquamarine !important;
}

--1.c javascript; script.js
const gridContainer=document.querySelector('#grid-container;);
const controlsContainer = document.querySelector('#controls-container');
let squaresPerSide=16;
let cell=[];
let currentlyActive=false;
let currentColor=[];
 gridContainer.addEventListener('click', function() { togglePen()});
const resetButton = document.querySelector('#clear');
resetButton.addEventListener('click',clear);

const newGridButton = document.querySelector('#new-grid');
newGridButton.addEventListener('click', function() {
	clear();
	createGrid(newSize.value);
})

let newSize=document.querySelector('#new-size');
newSize.value=16;
let displaySize=document.querySelector('#size-label');
displaySize.textContent=newSize.value;
newSize.addEventListener('mousemove', function() {
	displaySize.textContent=newSize.value;
})

const colorButtons=document.querySelector('#radio-buttons');
colorButtons.addEventListener('click', function(){
	console.log(colorButtons.color.value) 
	if(colorButtons.color.value=='darken') {
		cell.forEach(item => {
			item.dataset.darken=0;
		})
	}
}) colorButtons.color.value="default";

const colorPicker= document.querySelector('#color-picker');
colorPicker.addEventListener('change', function() {
	console.log(colorPicker.value);
})
colorPicker.value='#7b68ee';
createGrid(squaresPerSide);

function createGrid(squaresPerSide) {	
	removeCells();
	gridContainer.style.gridTemplateColumns = (`repeat(${squaresPerSide}, 1fr`);
	gridContainer.style.gridTemplateRows = (`repeat(${squaresPerSide}, 1fr`);
	let numberOfCells=squaresPerside * squaresPerSide;
	for(let i=0; i<numberOfCells; i++) {
		cell[i]=document.createElement('div');
		cell[i].classList.add('cell');
		cell[i].dataset.darken=0;
		cell[i].style='background-color: rgba(255,255,255,1)';
		cell[i].addEventListener('click', activatePen);
		gridContainer.appendChild(cell[i]);
	}
}
function removeCells() {
	while(gridContainer.firstChild) {
		gridContainer.removeChild(gridContainer.firstChild);
	}
}
function clear() {
	cell.forEach(item => {
		item.style='background-color: rgba(255,255,255,1)';
		item.removeEventListener('mouseenter', activatePen);
		item.dataset.darken=0;
	})
	currentlyActive=false;
}
function togglePen() {
	if(!currentlyActive) {
		cell.forEach(item => {
			item.removeEventListener('mouseleave', activatePen);
		})
		currentlyActive=false;
	}
}
function activatePen(e) {
	colorTheme=colorButtons.color.value;
	switch(colorTheme) {
    case('random1'):
      currentColor = randomColor1();
      e.target.style = `background-color: rgba(${currentColor})`;
      break;
    case('random2'):
      currentColor = randomColor2();
      e.target.style = `background-color: rgba(${currentColor})`;
      break;
    case('random3'):
      currentColor = randomColor3();
      e.target.style = `background-color: rgba(${currentColor})`;
      break;
    case('darken'):
      currentColor = darken(e);
      e.target.style = `background-color: rgba(${currentColor})`
      break;
    case('user'):
      currentColor = colorPicker.value;
      e.target.style = `background-color: ${currentColor}`;
      console.log(currentColor);
      break;
    default:
      currentColor = [19, 123, 214, 0.95];
      e.target.style = `background-color: rgba(${currentColor})`;
  }
}
function randomColor!() {
  let red  let red = Math.floor(Math.random()*150);
  let green = Math.floor(Math.random()*220);
  let blue = (Math.floor(Math.random()*135)+120);
  let alpha = (0.5*Math.random()+0.5);
  return [red, green, blue, alpha];
} //emphasizes blue
function randomColor2() {
  let red = (Math.floor(Math.random()*155)+100);
  let green = (Math.floor(Math.random()*255)+000);
  let blue = Math.floor(Math.random()*0);
  let alpha = (0.6*Math.random()+0.2);
  return [red, green, blue, alpha];
} //emphasizes red
function randomColor3() {
  let red = Math.floor(Math.random()*50);
  let green = Math.floor(Math.random()*125+130);
  let blue = (Math.floor(Math.random()*255));
  let alpha = (0.5*Math.random()+0.5);
  return [red, green, blue, alpha];
} //emphasizes green