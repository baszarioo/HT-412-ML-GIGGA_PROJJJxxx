and*e*jh271:
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>ETCHY SKETCHY üêßü§•</title>
		<link rel="stylesheet" href="style.css">
		<link href="https://fonts.googleapis.com/css2?family=Indie+Flower&family=League+Script&display=swap" rel="stylesheet">
	</head>
	<body>
		<h3>Sketchy plancheyy</h3>
		<div id ='controls-container'>
			<p>Click inside grid to toggle pen</p>
			<button id='clear'>Clear</button>
			<div id='new-container'>
				<button id='new-grid'>New</button>
				<input id='new-size' type='range' min='1' max="100" defaultValue="16">
				<label id='size-label' for='grid-size'></label>
			</div>
			<form id="radio-buttons">
				<input type="radio" name="color" value="default">
				<label for="blue">Blue</label><br>
				<input type="radio" name="color" value="random1">
				<label for="random1">Random 1</label><br>
				<input type="radio" name="color" value="random2">
				<label for="random2">Random 2</label><br>
				<input type="radio" name="color" value="random3">
				<label for="random3">Random 3</label><br>
				<input type="radio" name="color" value="darken">
				<label for="incrementally-darken">Incrementally Darken</label><br>
				<input type="radio" name="color" value="user">
				<label for="color-picker">Choose your own... &emsp;</label>
				<input id="color-picker" type="color">
			</form>
		</div>
		<div id='grid-container'> </div>
	</body>
	<script type="text/javascript" src="script.js"></script>
</html>

--1.b: CSS
html {
	margin: 0;
	padding: 0;
}
body {
	margin: 0;
	padding: 0;
	background-color: #80f718;
	font-family: 'Indie Flower', cursive;
}
h3{
	text-align: center;
	margin: 4vh;
	font-family: 'League Script', cursive;
	color: red;
	font-size: 5vw;
}
#controls-container {
	display: flex;
	float: left;
	flex-direction: column;
	justify-content: space-between;
	margin-left: 9vw;
	margin-top: 1vh;
	width: 24vw;
	padding: 0;
	height: 38vw;
}
p { 
	font-size: 2vw;
}
button {
	font-family: 'Indie Flower', cursive;
	background-color: #3ba1c9;
	color: rgb(0,0,0);
	border-radius: 24px;
	border: 1px solid white;
	width: 22vw;
	height: 3vh;
}
button:focus {
	outline: none;
}
#clear {
	position: relative;
	bottom: 2vw;
	background-color: #3ba1c9;
}
#clear:hover {
	box-shadow: 0 6px 6px rgba(0,0,0,0.199);
	background-color: #042b50;
	color: white;
	border: 1px solid #c6c6c6;
	text-decoration: none;
	transition: all .3s ease;
	color: #d9f3ed;
}
#clear:active {
	border: 1px solid #300a0a;
	transition: all 0s ease;
	background-color: #7bcfb3;
	color: white;
	box-shadow: 0 6px 6px rgba(0,0,0,0.199);
}
#new-container {
  line-height: 40px;
}
#new-grid {
  display: block;
  background-color: #f35858de;
}
#new-grid:hover {
  box-shadow: 0 6px 6px rgba(0, 0, 0, 0.199);
  background-color: #500d04;
  color: white;
  border: 1px solid #c6c6c6;
  text-decoration: none;
  transition: all .3s ease;
  color: #d9f3ed;
}
#new-grid:active {
  border: 1px solid #300a0a;
  transition: all 0s ease;
  background-color: #7bcfb3;
  color: white;
  box-shadow: 0 6px 6px rgba(0, 0, 0, 0.199);
}
#new-size {
  width: 19vw;
}
#size-label {
  width: 3vw;
  font-size: 1.5vw;
  color: #7b68ee;
}
/* Radio buttons */
#radio-buttons {
  line-height: 35px;
}
/* Main Grid */
#grid-container {
  float: right;
  margin-top: 1vh;
  margin-right: 6vw;
  box-sizing: content-box;
  display: grid;
  height: 49vw;
  width: 49vw;
  border: 1px rgba(0, 0, 0, 0.404) solid;
}

.cell {
	border: 1px rgba(0,0,0,0.041) solid;background-color: rgba(255,255,255,1);
}
.cell:hover {
	background-color: aquamarine !important;
}

--1.c javascript; script.js

const gridContainer=document.querySelector('#grid-container;);
const controlsContainer = document.querySelector('#controls-container');
let squaresPerSide=16;
let cell=[];
let currentlyActive=false;
let currentColor=[];
 gridContainer.addEventListener('click', function() { togglePen()});
const resetButton = document.querySelector('#clear');
resetButton.addEventListener('click',clear);

const newGridButton = document.querySelector('#new-grid');
newGridButton.addEventListener('click', function() {
	clear();
	createGrid(newSize.value);
})

let newSize=document.querySelector('#new-size');
newSize.value=16;
let displaySize=document.querySelector('#size-label');
displaySize.textContent=newSize.value;
newSize.addEventListener('mousemove', function() {
	displaySize.textContent=newSize.value;
})

const colorButtons=document.querySelector('#radio-buttons');
colorButtons.addEventListener('click', function(){
	console.log(colorButtons.color.value) 
	if(colorButtons.color.value=='darken') {
		cell.forEach(item => {
			item.dataset.darken=0;
		})
	}
}) colorButtons.color.value="default";

const colorPicker= document.querySelector('#color-picker');
colorPicker.addEventListener('change', function() {
	console.log(colorPicker.value);
})
colorPicker.value='#7b68ee';
createGrid(squaresPerSide);

function createGrid(squaresPerSide) {	
	removeCells();
	gridContainer.style.gridTemplateColumns = (`repeat(${squaresPerSide}, 1fr`);
	gridContainer.style.gridTemplateRows = (`repeat(${squaresPerSide}, 1fr`);
	let numberOfCells=squaresPerside * squaresPerSide;
	for(let i=0; i<numberOfCells; i++) {
		cell[i]=document.createElement('div');
		cell[i].classList.add('cell');
		cell[i].dataset.darken=0;
		cell[i].style='background-color: rgba(255,255,255,1)';
		cell[i].addEventListener('click', activatePen);
		gridContainer.appendChild(cell[i]);
	}
}
function removeCells() {
	while(gridContainer.firstChild) {
		gridContainer.removeChild(gridContainer.firstChild);
	}
}
function clear() {
	cell.forEach(item => {
		item.style='background-color: rgba(255,255,255,1)';
		item.removeEventListener('mouseenter', activatePen);
		item.dataset.darken=0;
	})
	currentlyActive=false;
}
function togglePen() {
	if(!currentlyActive) {
		cell.forEach(item => {
			item.removeEventListener('mouseleave', activatePen);
		})
		currentlyActive=false;
	}
}
function activatePen(e) {
	colorTheme=colorButtons.color.value;
	switch(colorTheme) {
    case('random1'):
      currentColor = randomColor1();
      e.target.style = `background-color: rgba(${currentColor})`;
      break;
    case('random2'):
      currentColor = randomColor2();
      e.target.style = `background-color: rgba(${currentColor})`;
      break;
    case('random3'):
      currentColor = randomColor3();
      e.target.style = `background-color: rgba(${currentColor})`;
      break;
    case('darken'):
      currentColor = darken(e);
      e.target.style = `background-color: rgba(${currentColor})`
      break;
    case('user'):
      currentColor = colorPicker.value;
      e.target.style = `background-color: ${currentColor}`;
      console.log(currentColor);
      break;
    default:
      currentColor = [19, 123, 214, 0.95];
      e.target.style = `background-color: rgba(${currentColor})`;
  }
}
function randomColor!() {
  let red  let red = Math.floor(Math.random()*150);
  let green = Math.floor(Math.random()*220);
  let blue = (Math.floor(Math.random()*135)+120);
  let alpha = (0.5*Math.random()+0.5);
  return [red, green, blue, alpha];
} //emphasizes blue
function randomColor2() {
  let red = (Math.floor(Math.random()*155)+100);
  let green = (Math.floor(Math.random()*255)+000);
  let blue = Math.floor(Math.random()*0);
  let alpha = (0.6*Math.random()+0.2);
  return [red, green, blue, alpha];
} //emphasizes red
function randomColor3() {
  let red = Math.floor(Math.random()*50);
  let green = Math.floor(Math.random()*125+130);
  let blue = (Math.floor(Math.random()*255));
  let alpha = (0.5*Math.random()+0.5);
  return [red, green, blue, alpha];
} //emphasizes green
function darken(e) {	
	let oldColor=e.target.style.backgroundColor;
	console.log(oldColor);
	let rgbaString=(oldColor.charAt(3) == 'a') ? oldColor.slice(5,-1): oldColor.slice(4, -1);
	let rgbaArray=rgbaString.split(',');
	let red=rgbaArray[0];
	let green=rgbaArray[1];
	let blue=rgbaArray[2];
	let alpha=rgbaArray[3] ? rgbaArray[3] : 1;
	let currentDarkingStep=e.target.dataset.darken;
	if(currentDarkingStep==9) return [0,0,0,1];
	console.log([red,green,blue,alpha]);
	console.log('Current darkening step: ' + currentDarkeningStep);
	let newRed=getNewColorValue(red, currentDarkeningStep, false);
	let newGreen=getNewColorValue(green, currentDarkeningStep, false);
	let newBlue=getNewColorValue(blue, currentDarkeningStep, false);
	let newAlpha=getNewColorValue(alpha, currentDarkeningStep, true);
	currentDarkeningStep++;
	e.target.dataset.darken=currentDarkeningStep;
	console.log([newRed, newGreen, newBlue, newAlpha]);
	reutrn [newRed, newGreen, newBlue, newAlpha];
}

function getNewColorValue(currentColorValue, step, alpha) {	
	let increment;
	let newValue;
	if(!alpha) {
		increment=currentColorValue / (10-step);
		console.log('Current color value: '+currentColorValue);
		console.log('Increment: '+increment);
		newValue=currentColorValue - increment;
	} else {
		increment=(1-currentColorValue)/(10-step);
		console.log('Current color value: ' +currentColorValue);
		console.log('Increment: ' + increment);
		newValue = +currentColorValue+increment;
	}
	console.log('New color value: ' + newValue);
	return (newValue);
}



@tmcerleaX - n.
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>SKETCH APP PAINT</title>
	<meta name="author" content="XD XD nicetry">
	<meta name="description" content="A simple painting tiles app, build with Vanilla JS">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link hrefd="css/style.css" rel="stylesheet">
</head>

<body> 
	<div clas="conatiner" id="titlecontainer">
		<h1 id="gametitle">Sketch app</h1>
	</div>
	<div class="conatiner" id="menucontainer">
		<button class="featurebutton" id="resetbutton" onclick="resetGrid()">Reset</button>
		<button class="featurebutton" </button>
		<button class="featurebutton" </button>
		<button class="featurebutton" </button>
		<button class="featurebutton" </button>
		<button class="featurebutton" </button>
	</div>
	<div class="container" id="maincontainer">
	</div>
	
	<script src="js/main.js"></script>
</body>
</html>


--2.b: CSS

html { font-size: 15px; }
@meida only screen and (max-width: 800px) {
	html { font-size: 10px; } 
}
@media only screen and (max-width: 550px) {
	html { font-size: 8px; }
}
@media only screen and (max-width: 450px) {
	html { font-size: 7px; }
}
body {
	margin: 0;
	width: 100%;
	height: 100vh;
	color: #fff;
	background: linear-gradient(-45deg, #e2592f, #dd1964, #0faee7, #16d861);
	background-size: 400% 400%;
	animation: backgroundGradient 15s ease infinite;
}
@keyframes backgroundGradient {
 0% { background-position: 0% 0%; }
 50% { background-position: 100% 50%; }
 100% { background-position: 0% 0%; }
}
#titlecontainer {
	display: flex;
	height: 7rem;
	justify-content: center;
	align-items: center;
}
#gametile {
	font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
	font-size: 50px;
	animation: titleShadowZoom 3s ease infinite;
}
@keyframes titleShadowZoom { 
 0% { text-shadow: 1px 1px #000000; }
 50% { text-shadow: 4px 4px #000000; }
 100% { text-position: 1px 1px #000000; }
}
#menucontainer {
	display: flex;
	flex-wrap: wrap;
	height: 5rem;
	margin-bottom: 3rem;
	justify-content: center;
}
.featurebutton {
	background-color: white;
	border: 3px solid black;
	border-radius: 7px;
	margin: 1rem;
	width: 100px;
	text-transform: uppercase;
	font-weight: bolder;
}
#rainbowbutton {	animation: rainbowButtonBackground 10s ease infinite;	}

@keyframes rainbowButtonBackground {
	0% { background-color: #ff6262; }
	20% { background-color: #ffef62; }
	40% { background-color: #7cff62; }
	60% { background-color: #62ffe5; }
	80% { background-color: #6272ff; }
	100% { background-color: #ff62ff; }
}
#opaquebutton {
	animation: opaqueButtonBackground 3s ease infinite;
}
@keyframes opaqueButtonBackground {	
	0% { opacity: 0%; }
	50% { 
		opacity: 100%;
		color: black;
	}
	100%{ opacity: 0%; }
}
#maincontainer {
	display: flex;
	flex-direction: row;
	flex-wrap: nowrap;
	justify-content: center;
	width: 40 rem;
	height: 40rem;
	margin-left: auto;
	margin-right: auto;
}
.gamecell {
	background-color: white;
	padding: 0px;
	animation: gameShadowZoom 3s ease infinite;
}
@keyframes gameShadowZoom {
	0% {	box-shadow: 3px 3px #000000;	}
	50% {	box-shadow: 10px 10px #000000; 	}
	100% { 	box-shadow: 3px 3px #000000;	}
}


--2.c: JavaScript
const addColorButtons = document.querySelector('.featurebutton');
const userColorPicker=document.querySelector('#input-color');
let slider = document.querySelector('#sizeRange');
let color='black';
function newGrid(numberCells){	
	numberCells=numberCe;;s || 16;
	let cellWidth = 40/numberCells+"rem";
	let cellHeight=40/numberCells+"rem";
	const mainContainerDiv = document.getElementById("maincontainer");
	let divArray=[];
	for(i=0; i<numberCells; i++){
		divArray[i]=document.createElement("div");
		mainContainerDiv.appendChild(divArray[i]);
		for(j=0; j<numberCells; j++) {
			const newDiv=document.createElement("div");
			const classAttribute=document.createAttriburte("class");
			classAttribute.value="gamecell";
			newDiv.setAttributeNode(classAttribute);
			const widthHeightAttribute = document.createAttribute("style");
			widthHeightAttribute.value=`width: ${cellWidth}; height: ${cellHeight};`;
			newDiv.setAttributeNode(widthHeightAttribute);
			divArray[i].appendChild(newDiv);
		}
	}
	onLoad();
}

//function to reset the Grid.
function resetGrid() {	
	let allCells = document.querySelectorAll(".gamecell").forEach(cell => {
		cell.style.backgroundColor="white";
	})
	let promptNumberCells = prompt("How many squares per side? (Maximum: 100)");
	let numberCells = parseInt(promptNumberCells, 10);
	if(isNaN(numberCells)){
		window.alert("Enter a positive integer! (max 100)");
		return;
	}
	else if(nubmerCells <=0) {
		window.alert("Enter a positive integer! (max 100)");
		return;
	}
	else if(nubmerCells >100) {
		window.alert("Enter a positive integer! (max 100)");
		return;
	}
	const mainContainerDiv=document.getElementById("maincontainer");
	while(mainContainerDiv.firstChild) mainContainerDiv.removeChild(mainContainerDiv.firstChild);
	newGrid(numberCells);
}
//trigger creation of grid on DOM Content loaded.
window.addEventListener('DOMContentLoaded', (event) => {
	newGrid();
});
function colorGrid() {
	console.log('triggers colorGrid')
	switch(color){
		case 'rainbow':
			this.style.backgroundColor = `hsl(${Math.random() * 360}, 100%, 50%)`;
			this.classList.remove('opaque');
			break;
		case 'opaque';
			if(this.style.backgroundColor.match(/rgba/)) {
				let currentOpacity = Number(this.style.backgroundColor.slice(-4,-1));
				if(currentOpacity<=0.9) {
					this.style.backgroundColor=`rgba(0,0,0,${currentOPacity + 0.1})`;
					this.classList.add('opaque');
				}
			} else if(this.classList=='opaque' && this.style.backgroundColor == 'rgb(0,0,0)') {
				return;
			} else {
				this.style.backgroundColor='rgba(0,0,0,0.1)';
			}
			break;
		case 'eraser':
			this.style.backgroundColor = '#ffffff';
            this.classList.remove('opaque');
            break;
        case 'black':
            this.style.backgroundColor = '#000000';
            this.classList.remove('opaque');
            break;
        default:
            this.style.backgroundColor = color;
            this.classList.remove('opaque');
            break;
    } 
}
function changeColor(event) {